{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to Transpose Transpose is the world\u2019s most complete, powerful, and performant Web3 data suite. Our cutting edge indexing engine processes and enriches raw blockchain data in realtime. This data is served to you through a set of intuitive APIs optimized for a wide array of production-ready use cases. Transpose data is decoded from the blockchain using artificial intelligence, and structured by our team of protocol experts in a way that makes it effortless to build on top of. Our Products REST API If you are looking for hyper-optimized, parameterized access to key blockchain primitives (such as NFT sales, token balances, wallet histories etc.) in bulk, our REST API is built with you in mind. Explore our REST Documentation Explore highly optimized queries for key blockchain primitives. SQL API If your use case requires more flexibility, our SQL API provides you with the ability to write sophisticated custom queries against our full suite of indexed and decoded data that return in just milliseconds. Explore our SQL Documentation Start writing instantaneous, powerful and hyper-flexible queries against arbitrary real-time blockchain data. Key concepts The fastest way to get acquainted with key concepts is to complete our quickstart tutorial, which will give you a hands-on, interactive experience using live data from Transpose APIs. Visit our Quickstart Guide Get started with both our REST and SQL APIs in less than 5 minutes. Next steps Make sure you\u2019ve created a free tier team account. You can do that here . Start off with our quick start tutorial . Explore the Transpose Atlas to discover powerful queries from our community. Want to chat with a member of our team? Get in touch .","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#welcome-to-transpose","text":"Transpose is the world\u2019s most complete, powerful, and performant Web3 data suite. Our cutting edge indexing engine processes and enriches raw blockchain data in realtime. This data is served to you through a set of intuitive APIs optimized for a wide array of production-ready use cases. Transpose data is decoded from the blockchain using artificial intelligence, and structured by our team of protocol experts in a way that makes it effortless to build on top of.","title":"Welcome to Transpose"},{"location":"#our-products","text":"","title":"Our Products"},{"location":"#rest-api","text":"If you are looking for hyper-optimized, parameterized access to key blockchain primitives (such as NFT sales, token balances, wallet histories etc.) in bulk, our REST API is built with you in mind. Explore our REST Documentation Explore highly optimized queries for key blockchain primitives.","title":"REST API"},{"location":"#sql-api","text":"If your use case requires more flexibility, our SQL API provides you with the ability to write sophisticated custom queries against our full suite of indexed and decoded data that return in just milliseconds. Explore our SQL Documentation Start writing instantaneous, powerful and hyper-flexible queries against arbitrary real-time blockchain data.","title":"SQL API"},{"location":"#key-concepts","text":"The fastest way to get acquainted with key concepts is to complete our quickstart tutorial, which will give you a hands-on, interactive experience using live data from Transpose APIs. Visit our Quickstart Guide Get started with both our REST and SQL APIs in less than 5 minutes.","title":"Key concepts"},{"location":"#next-steps","text":"Make sure you\u2019ve created a free tier team account. You can do that here . Start off with our quick start tutorial . Explore the Transpose Atlas to discover powerful queries from our community. Want to chat with a member of our team? Get in touch .","title":"Next steps"},{"location":"billing/","text":"Billing Credits and Limits Transpose uses a credits system to manage API usage. Each team has an associated tier, and each tier comes with a fixed number of credits used per month. For information on our tiers, and to understand more about how much credits get you in terms of compute and data, check out our pricing page and our pricing blog post . Overages Tracking your usage Overall Usage Understanding how many credits you use is an important capability. To track your monthly usage so far, visit the Transpose App . Per-Request Usage Every API request returns the number of credits used in a SQL Query SELECT * from ethereum . nfts LIMIT 1 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT * from ethereum.nfts LIMIT 1\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT * from ethereum.nfts LIMIT 1'; const headers = { 'Content-Type': 'application } Questions? Join our Discord, and chat with the team today. Join our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Billing"},{"location":"billing/#billing","text":"","title":"Billing"},{"location":"billing/#credits-and-limits","text":"Transpose uses a credits system to manage API usage. Each team has an associated tier, and each tier comes with a fixed number of credits used per month. For information on our tiers, and to understand more about how much credits get you in terms of compute and data, check out our pricing page and our pricing blog post .","title":"Credits and Limits"},{"location":"billing/#overages","text":"","title":"Overages"},{"location":"billing/#tracking-your-usage","text":"","title":"Tracking your usage"},{"location":"billing/#overall-usage","text":"Understanding how many credits you use is an important capability. To track your monthly usage so far, visit the Transpose App .","title":"Overall Usage"},{"location":"billing/#per-request-usage","text":"Every API request returns the number of credits used in a SQL Query SELECT * from ethereum . nfts LIMIT 1 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT * from ethereum.nfts LIMIT 1\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT * from ethereum.nfts LIMIT 1'; const headers = { 'Content-Type': 'application } Questions? Join our Discord, and chat with the team today. Join our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Per-Request Usage"},{"location":"credits/","text":"","title":"Credits"},{"location":"quickstart/","text":"Quickstart Introduction Let\u2019s start by setting the scene; you\u2019re a developer working on a cutting-edge Web3 data enabled product. You need low-latency, high-bandwidth, interpretable, realtime information from the blockchain to make your product stand out. Fortunately, you\u2019ve chosen Transpose, and this makes integrating any arbitrary Web3 data into your production application a breeze. In this example, we\u2019ll be focusing on pulling daily floor prices for the CryptoPunks NFT collection. You might be interested in integrating this data for any number of reasons; maybe you want this information for analytics, for executing realtime trades, or for helping to understand the liquidity of the NFT collection. Before we get started, it\u2019s important to note that NFT pricing data is only one of the limitless applications of Transpose data. Transpose indexes over 99.9% of trading volume on the Ethereum blockchain, and all of this data is accessible through our REST and SQL APIs. We\u2019ll work with our SQL API, and with one of our REST APIs, in this quickstart guide. API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner. 1. Get all CryptoPunks NFT sales Given that our final goal is to understand daily floor prices (the lowest price that a CryptoPunk was sold for on a given day), to get started it makes sense to pull the complete set of sales data from CryptoPunks throughout their entire history. This is a very standard use-case, and we can leverage Transpose\u2019s REST API to do this. Specifically, we\u2019ll use api.transpose.io/nft/sales-by-contract-address . We\u2019ll need to pass the blockchain we want (Ethereum), the CryptoPunks contract address ( 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB ), the desired ordering (ascending, specified as asc ), and a limit on the number of results we\u2019d like (in this case, we\u2019ll just do 10). Python import requests url = \"https://api.transpose.io/nft/sales-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'order': 'asc', 'limit': 10} response = requests.get(url, headers=headers, params=params) print(response.text) Voila! How easy was that? 2. Group CryptoPunks sales by date So, we\u2019ve got every CryptoPunk sales event in all of history. Now, the next step is to group this data by the date that it occurred on. Transforms and aggregations on huge datasets? Sounds like a job for SQL! With the Transpose SQL API, we do all the heavy lifting for you - you give us a query, we return you the results in milliseconds. Let\u2019s put that to the test, and group these results by date. The following SQL query selects all NFT sales, filters them to only include CryptoPunks, groups them by date, and returns the count of the number of sales events that occurred on that particular day - an important step towards our ultimate goal of calculating the daily floor price. SQL Query SELECT /* extract date */ timestamp :: date AS date FROM ethereum . nft_sales AS sales /* specify CryptoPunks contract address */ WHERE sales . contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' /* group sales by date */ GROUP BY date /* skip days with no sales */ HAVING COUNT ( * ) > 0 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;'; const headers = { 'Content-Type': 'application } 3. Add logic to get the daily floor price Now that we have a working query that can group CryptoPunks sales by the date on which they occurred, we can take all of the sales that occurred each day, and calculate the floor price. Given that floor prices can be subject to a lot of dataset noise, here we use a \u2018smart floor price\u2019 - computed by taking the value at the bottom 20th percentile of the daily data. Take a moment to examine this revised query, and note the (small) differences between this query and our last query. Then let it rip! SQL Query SELECT /* extract date */ timestamp :: date AS date , /* calculate smart floor price as bottom 5 percentile of USD sale prices */ percentile_disc ( 0 . 2 ) WITHIN GROUP ( ORDER BY usd_price ) AS floor_price FROM ethereum . nft_sales AS sales /* specify CryptoPunks contract address */ WHERE sales . contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' /* group sales by date */ GROUP BY date /* skip days with no sales */ HAVING COUNT ( * ) > 0 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT timestamp::date AS date, percentile_disc(0.2) WITHIN GROUP (ORDER BY usd_price) AS floor_price FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT timestamp::date AS date, percentile_disc(0.2) WITHIN GROUP (ORDER BY usd_price) AS floor_price FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;'; const headers = { 'Content-Type': 'application } Now, it's your turn! Try experimenting with the requests above yourself. For example, you could change the contract addresses to target different NFT Collections (i.e. why not give Bored Ape Yacht Club a go? The contract address for Bored Ape Yacht Club is 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D ). When you\u2019re ready to experiment further, we recommend: Exploring the Atlas Explore and contribute to queries created by the Transpose community. Exploring the Playground Start writing powerful and hyper-flexible queries against arbitrary real-time blockchain data. Joining our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Quick Start"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#introduction","text":"Let\u2019s start by setting the scene; you\u2019re a developer working on a cutting-edge Web3 data enabled product. You need low-latency, high-bandwidth, interpretable, realtime information from the blockchain to make your product stand out. Fortunately, you\u2019ve chosen Transpose, and this makes integrating any arbitrary Web3 data into your production application a breeze. In this example, we\u2019ll be focusing on pulling daily floor prices for the CryptoPunks NFT collection. You might be interested in integrating this data for any number of reasons; maybe you want this information for analytics, for executing realtime trades, or for helping to understand the liquidity of the NFT collection. Before we get started, it\u2019s important to note that NFT pricing data is only one of the limitless applications of Transpose data. Transpose indexes over 99.9% of trading volume on the Ethereum blockchain, and all of this data is accessible through our REST and SQL APIs. We\u2019ll work with our SQL API, and with one of our REST APIs, in this quickstart guide. API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner.","title":"Introduction"},{"location":"quickstart/#1-get-all-cryptopunks-nft-sales","text":"Given that our final goal is to understand daily floor prices (the lowest price that a CryptoPunk was sold for on a given day), to get started it makes sense to pull the complete set of sales data from CryptoPunks throughout their entire history. This is a very standard use-case, and we can leverage Transpose\u2019s REST API to do this. Specifically, we\u2019ll use api.transpose.io/nft/sales-by-contract-address . We\u2019ll need to pass the blockchain we want (Ethereum), the CryptoPunks contract address ( 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB ), the desired ordering (ascending, specified as asc ), and a limit on the number of results we\u2019d like (in this case, we\u2019ll just do 10). Python import requests url = \"https://api.transpose.io/nft/sales-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'order': 'asc', 'limit': 10} response = requests.get(url, headers=headers, params=params) print(response.text) Voila! How easy was that?","title":"1. Get all CryptoPunks NFT sales"},{"location":"quickstart/#2-group-cryptopunks-sales-by-date","text":"So, we\u2019ve got every CryptoPunk sales event in all of history. Now, the next step is to group this data by the date that it occurred on. Transforms and aggregations on huge datasets? Sounds like a job for SQL! With the Transpose SQL API, we do all the heavy lifting for you - you give us a query, we return you the results in milliseconds. Let\u2019s put that to the test, and group these results by date. The following SQL query selects all NFT sales, filters them to only include CryptoPunks, groups them by date, and returns the count of the number of sales events that occurred on that particular day - an important step towards our ultimate goal of calculating the daily floor price. SQL Query SELECT /* extract date */ timestamp :: date AS date FROM ethereum . nft_sales AS sales /* specify CryptoPunks contract address */ WHERE sales . contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' /* group sales by date */ GROUP BY date /* skip days with no sales */ HAVING COUNT ( * ) > 0 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;'; const headers = { 'Content-Type': 'application }","title":"2. Group CryptoPunks sales by date"},{"location":"quickstart/#3-add-logic-to-get-the-daily-floor-price","text":"Now that we have a working query that can group CryptoPunks sales by the date on which they occurred, we can take all of the sales that occurred each day, and calculate the floor price. Given that floor prices can be subject to a lot of dataset noise, here we use a \u2018smart floor price\u2019 - computed by taking the value at the bottom 20th percentile of the daily data. Take a moment to examine this revised query, and note the (small) differences between this query and our last query. Then let it rip! SQL Query SELECT /* extract date */ timestamp :: date AS date , /* calculate smart floor price as bottom 5 percentile of USD sale prices */ percentile_disc ( 0 . 2 ) WITHIN GROUP ( ORDER BY usd_price ) AS floor_price FROM ethereum . nft_sales AS sales /* specify CryptoPunks contract address */ WHERE sales . contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' /* group sales by date */ GROUP BY date /* skip days with no sales */ HAVING COUNT ( * ) > 0 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT timestamp::date AS date, percentile_disc(0.2) WITHIN GROUP (ORDER BY usd_price) AS floor_price FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT timestamp::date AS date, percentile_disc(0.2) WITHIN GROUP (ORDER BY usd_price) AS floor_price FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;'; const headers = { 'Content-Type': 'application }","title":"3. Add logic to get the daily floor price"},{"location":"quickstart/#now-its-your-turn","text":"Try experimenting with the requests above yourself. For example, you could change the contract addresses to target different NFT Collections (i.e. why not give Bored Ape Yacht Club a go? The contract address for Bored Ape Yacht Club is 0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D ). When you\u2019re ready to experiment further, we recommend: Exploring the Atlas Explore and contribute to queries created by the Transpose community. Exploring the Playground Start writing powerful and hyper-flexible queries against arbitrary real-time blockchain data. Joining our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Now, it's your turn!"},{"location":"guides/token-prices/","text":"","title":"Token prices"},{"location":"rest/authentication/","text":"Authentication The Transpose REST API suite can be accessed with any valid Transpose API key. To authenticate, simply include the case-insensitive X-API-KEY request header with your API key as the value. It's that easy! API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner. Basic Example Python import requests url = \"https://api.transpose.io/block/blocks-by-number\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'order': 'desc', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Authentication"},{"location":"rest/authentication/#authentication","text":"The Transpose REST API suite can be accessed with any valid Transpose API key. To authenticate, simply include the case-insensitive X-API-KEY request header with your API key as the value. It's that easy! API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner.","title":"Authentication"},{"location":"rest/authentication/#basic-example","text":"Python import requests url = \"https://api.transpose.io/block/blocks-by-number\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'order': 'desc', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Basic Example"},{"location":"rest/overview/","text":"Overview Welcome to the Transpose REST API Suite Our REST API suite grants you the industry\u2019s most comprehensive view of key cross-chain blockchain data primitives: complete account, block, transaction, token, NFT, and ENS data. Retrieve billions of rows of data at low cost using over 50 different endpoints and over 100 flexible query parameters. Block API Retrieve accounts, blocks, transactions, and logs in bulk. NFT API Query any collection, NFT, owner, mint, transfer, burn, or sale. Token API Lookup any token, transfer, balance, DEX swap, liquidity event, and more. ENS API Search for and resolve any ENS record using name, account, expiration, and more Join the Transpose Community Join our Discord to ask technical questions, share what you're building, chat with others in the community, suggest new features, request higher rate limits, and much more. Here's the link! Join our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Overview"},{"location":"rest/overview/#overview","text":"","title":"Overview"},{"location":"rest/overview/#welcome-to-the-transpose-rest-api-suite","text":"Our REST API suite grants you the industry\u2019s most comprehensive view of key cross-chain blockchain data primitives: complete account, block, transaction, token, NFT, and ENS data. Retrieve billions of rows of data at low cost using over 50 different endpoints and over 100 flexible query parameters. Block API Retrieve accounts, blocks, transactions, and logs in bulk. NFT API Query any collection, NFT, owner, mint, transfer, burn, or sale. Token API Lookup any token, transfer, balance, DEX swap, liquidity event, and more. ENS API Search for and resolve any ENS record using name, account, expiration, and more","title":"Welcome to the Transpose REST API Suite"},{"location":"rest/overview/#join-the-transpose-community","text":"Join our Discord to ask technical questions, share what you're building, chat with others in the community, suggest new features, request higher rate limits, and much more. Here's the link! Join our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Join the Transpose Community"},{"location":"rest/pagination/","text":"Pagination Pagination on the Transpose API is straightforward. Transpose API endpoints will return a maximum of 500 results in a single query. To return the next page, simply call the URL under the next key in the response object. This will always return the next page of results. If the next key is null, there is no next page! Here is what this looks like in Python using the requests package: import requests url = 'https://api.transpose.io/nft/collections-by-date-created' headers = { 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS' } # retrieve the first page response = requests.get(url, headers=headers) first_page = response.json() print('First page:', first_page) # retrieve second page (if applicable) if first_page.get('next', None) is not None: response = requests.get(first_page['next'], headers=headers) second_page = response.json() print('Second page:', second_page)","title":"Pagination"},{"location":"rest/pagination/#pagination","text":"Pagination on the Transpose API is straightforward. Transpose API endpoints will return a maximum of 500 results in a single query. To return the next page, simply call the URL under the next key in the response object. This will always return the next page of results. If the next key is null, there is no next page! Here is what this looks like in Python using the requests package: import requests url = 'https://api.transpose.io/nft/collections-by-date-created' headers = { 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS' } # retrieve the first page response = requests.get(url, headers=headers) first_page = response.json() print('First page:', first_page) # retrieve second page (if applicable) if first_page.get('next', None) is not None: response = requests.get(first_page['next'], headers=headers) second_page = response.json() print('Second page:', second_page)","title":"Pagination"},{"location":"rest/response/","text":"Response The Transpose API has two types of response types: one for successes and one for errors. A success response will be returned on any request that completes successfully (even if no results are returned) along with a HTTP 200 status code. An error response will be returned on any request that fails, whether due to the client (i.e. you) or the server (i.e. us), along with a HTTP 4xx or 5xx status code. Success Response The success response will always obey the following top-level JSON structure: Name Type Description status string The status of the response. Will be success for a success response. count integer The number of results returned (matches the length of the results field). next string A valid URL with a cursor key pointing to the next page of results. results list A list of objects containing the results of the request. Here is an example of an actual success response following this structure: { \"status\" : \"success\" , \"count\" : 1 , \"next\" : \"https://api.transpose.io/v0/nft/collections-by-name?cursor=eyJzdWJzdH\" , \"results\" : [{ \"account_address\" : \"0x05a56E2D52c817161883f50c441c3228CFe54d9f\" , \"created_timestamp\" : \"2015-07-30T15:26:28Z\" , \"account_type\" : \"eoa\" , \"eth_balance\" : 22429528978412558 }] } Error Response The error response will always obey the following top-level JSON structure: Name Type Description status string The status of the response. Will be error for an error response. message string A more descriptive error message explaining where the request failed. Here is an example of an actual error response following this structure: { \"status\" : \"error\" , \"message\" : \"Invalid value for contract_addresses: 0x12345\" }","title":"Response"},{"location":"rest/response/#response","text":"The Transpose API has two types of response types: one for successes and one for errors. A success response will be returned on any request that completes successfully (even if no results are returned) along with a HTTP 200 status code. An error response will be returned on any request that fails, whether due to the client (i.e. you) or the server (i.e. us), along with a HTTP 4xx or 5xx status code.","title":"Response"},{"location":"rest/response/#success-response","text":"The success response will always obey the following top-level JSON structure: Name Type Description status string The status of the response. Will be success for a success response. count integer The number of results returned (matches the length of the results field). next string A valid URL with a cursor key pointing to the next page of results. results list A list of objects containing the results of the request. Here is an example of an actual success response following this structure: { \"status\" : \"success\" , \"count\" : 1 , \"next\" : \"https://api.transpose.io/v0/nft/collections-by-name?cursor=eyJzdWJzdH\" , \"results\" : [{ \"account_address\" : \"0x05a56E2D52c817161883f50c441c3228CFe54d9f\" , \"created_timestamp\" : \"2015-07-30T15:26:28Z\" , \"account_type\" : \"eoa\" , \"eth_balance\" : 22429528978412558 }] }","title":"Success Response"},{"location":"rest/response/#error-response","text":"The error response will always obey the following top-level JSON structure: Name Type Description status string The status of the response. Will be error for an error response. message string A more descriptive error message explaining where the request failed. Here is an example of an actual error response following this structure: { \"status\" : \"error\" , \"message\" : \"Invalid value for contract_addresses: 0x12345\" }","title":"Error Response"},{"location":"rest/block-api/overview/","text":"Welcome to the Block API The Block API provides endpoints for accessing low-level blockchain data at scale, including accounts, blocks, transactions, and logs. Endpoints The Block API supports the following groups of endpoints: Account Endpoints : Retrieve any account, including both externally-owned accounts and smart contracts, along with essential account metadata. Block Endpoints : Retrieve every block in existence with smart fee calculations and flexible query parameters. Transaction Endpoints : Retrieve every transaction ever created with powerful query parameters that let you filter by block number, transaction hash, involved addresses, transfer value, target contract, target contract method, and more. Log Endpoints : Retrieve and filter all historical logs by account, topic, contract, and much more.","title":"Overview"},{"location":"rest/block-api/overview/#welcome-to-the-block-api","text":"The Block API provides endpoints for accessing low-level blockchain data at scale, including accounts, blocks, transactions, and logs.","title":"Welcome to the Block API"},{"location":"rest/block-api/overview/#endpoints","text":"The Block API supports the following groups of endpoints: Account Endpoints : Retrieve any account, including both externally-owned accounts and smart contracts, along with essential account metadata. Block Endpoints : Retrieve every block in existence with smart fee calculations and flexible query parameters. Transaction Endpoints : Retrieve every transaction ever created with powerful query parameters that let you filter by block number, transaction hash, involved addresses, transfer value, target contract, target contract method, and more. Log Endpoints : Retrieve and filter all historical logs by account, topic, contract, and much more.","title":"Endpoints"},{"location":"rest/block-api/models/account_model/","text":"Account Model The Account Model represents a single account. This includes both externally-owned accounts and smart contracts. The Account Model follows the following structure: Name Description Type address The address of the account (as a checksum address). string type The type of the account ( wallet or contract ). string last_active_timestamp The date at which the account was last active (in ISO-8601 format). date-time created_timestamp The date at which the account was first created (in ISO-8601 format). date-time creator The account creator ( null if the account is not a contract). string","title":"Account"},{"location":"rest/block-api/models/account_model/#account-model","text":"The Account Model represents a single account. This includes both externally-owned accounts and smart contracts. The Account Model follows the following structure: Name Description Type address The address of the account (as a checksum address). string type The type of the account ( wallet or contract ). string last_active_timestamp The date at which the account was last active (in ISO-8601 format). date-time created_timestamp The date at which the account was first created (in ISO-8601 format). date-time creator The account creator ( null if the account is not a contract). string","title":"Account Model"},{"location":"rest/block-api/models/block_model/","text":"Block Model The Block Model represents a single block. The Block Model follows the following structure: Table Name Description Type block_number The block's number. integer block_hash The hash of all the block's contents. string timestamp The block's timestamp (in ISO-8601 format). date-time parent_hash The block hash of the block's parent. string mix_hash The block's mix hash, used in the proof of work algorithm. string nonce The block's nonce, used in the proof of work algorithm. string sha3_uncles The hash of the block's uncle blocks. string difficulty The block's mining difficulty. integer total_difficulty Total difficulty of all blocks up until the block. integer size The block's size (in bytes). integer base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). integer gas_limit The maximum amount of gas that can be used in the block (in gas units). integer gas_used The amount of gas used in the block (in gas units). integer total_fees_burned The amount of transaction fees burned in the block (see EIP-1559) (in Wei). integer total_fees_rewarded The amount of transaction fees rewarded to the miner of the block (in Wei). integer total_fees_saved The amount of transaction fees saved by transactions in the block (in Wei). integer transaction_count The number of transactions in the block. integer miner The address of the miner who mined the block. string mining_reward The amount rewarded to the miner of the block (in Wei). integer uncle_count The number of uncle blocks included in the block. integer uncles The uncle blocks included in the block (maximum 2 uncles per block). array Indexes (block_number) (timestamp) (miner_address, block_number) (miner_address, timestamp) (__confirmed = false)","title":"Block"},{"location":"rest/block-api/models/block_model/#block-model","text":"The Block Model represents a single block. The Block Model follows the following structure:","title":"Block Model"},{"location":"rest/block-api/models/block_model/#table","text":"Name Description Type block_number The block's number. integer block_hash The hash of all the block's contents. string timestamp The block's timestamp (in ISO-8601 format). date-time parent_hash The block hash of the block's parent. string mix_hash The block's mix hash, used in the proof of work algorithm. string nonce The block's nonce, used in the proof of work algorithm. string sha3_uncles The hash of the block's uncle blocks. string difficulty The block's mining difficulty. integer total_difficulty Total difficulty of all blocks up until the block. integer size The block's size (in bytes). integer base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). integer gas_limit The maximum amount of gas that can be used in the block (in gas units). integer gas_used The amount of gas used in the block (in gas units). integer total_fees_burned The amount of transaction fees burned in the block (see EIP-1559) (in Wei). integer total_fees_rewarded The amount of transaction fees rewarded to the miner of the block (in Wei). integer total_fees_saved The amount of transaction fees saved by transactions in the block (in Wei). integer transaction_count The number of transactions in the block. integer miner The address of the miner who mined the block. string mining_reward The amount rewarded to the miner of the block (in Wei). integer uncle_count The number of uncle blocks included in the block. integer uncles The uncle blocks included in the block (maximum 2 uncles per block). array","title":"Table"},{"location":"rest/block-api/models/block_model/#indexes","text":"(block_number) (timestamp) (miner_address, block_number) (miner_address, timestamp) (__confirmed = false)","title":"Indexes"},{"location":"rest/block-api/models/log_model/","text":"Log Model The Log Model represents a single transaction log. The Log Model follows the following structure: Name Description Type block_number The block number the parent transaction was included in. integer log_index The index of the log in the block. integer transaction_position The position of the parent transaction in the block. integer transaction_hash The parent transaction's hash. string timestamp The log's timestamp (in ISO-8601 format). string address The address of the smart contract that emitted the log. string topics The topics of the log (maximum 4 topics per log). array data The data of the log (bytes data as a hex string). string","title":"Log"},{"location":"rest/block-api/models/log_model/#log-model","text":"The Log Model represents a single transaction log. The Log Model follows the following structure: Name Description Type block_number The block number the parent transaction was included in. integer log_index The index of the log in the block. integer transaction_position The position of the parent transaction in the block. integer transaction_hash The parent transaction's hash. string timestamp The log's timestamp (in ISO-8601 format). string address The address of the smart contract that emitted the log. string topics The topics of the log (maximum 4 topics per log). array data The data of the log (bytes data as a hex string). string","title":"Log Model"},{"location":"rest/block-api/models/transaction_model/","text":"Transaction Model The Transaction Model represents a single transaction. The Transaction Model follows the following structure: Name Description Type transaction_hash The transaction's hash. string timestamp The transaction's timestamp (in ISO-8601 format). string block_number The block number the transaction was included in. integer base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). integer max_priority_fee_per_gas The maximum priority fee used by the transaction (in Wei per gas unit). integer max_fee_per_gas The maximum fee used by the transaction (in Wei per gas unit). integer gas_limit The maximum amount of gas that can be used in the transaction (in gas units). integer gas_used The amount of gas used in the transaction (in gas units). integer gas_price The actual price of gas used in the transaction (in Wei per gas unit). integer transaction_fee The gas fee paid by the transaction (in Wei). integer fees_burned The amount of transaction fees burned by the transaction (see EIP-1559) (in Wei). integer fees_rewarded The amount of transaction fees rewarded to the miner of the transaction (in Wei). integer fees_saved The amount of transaction fees saved by the transaction (in Wei). integer nonce The transaction sender's nonce. integer position The position of the transaction in the block. integer type The type of the transaction (see EIP-1559, EIP-2718). integer from The address of the transaction's sender. string to The address of the transaction's recipient, if any. string value The amount sent by the transaction (in Wei). integer contract_address The address of the contract created by the transaction, if any. string internal_transaction_count The number of internal transactions produced in the transaction. integer log_count The number of logs produced in the transaction. integer","title":"Transaction"},{"location":"rest/block-api/models/transaction_model/#transaction-model","text":"The Transaction Model represents a single transaction. The Transaction Model follows the following structure: Name Description Type transaction_hash The transaction's hash. string timestamp The transaction's timestamp (in ISO-8601 format). string block_number The block number the transaction was included in. integer base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). integer max_priority_fee_per_gas The maximum priority fee used by the transaction (in Wei per gas unit). integer max_fee_per_gas The maximum fee used by the transaction (in Wei per gas unit). integer gas_limit The maximum amount of gas that can be used in the transaction (in gas units). integer gas_used The amount of gas used in the transaction (in gas units). integer gas_price The actual price of gas used in the transaction (in Wei per gas unit). integer transaction_fee The gas fee paid by the transaction (in Wei). integer fees_burned The amount of transaction fees burned by the transaction (see EIP-1559) (in Wei). integer fees_rewarded The amount of transaction fees rewarded to the miner of the transaction (in Wei). integer fees_saved The amount of transaction fees saved by the transaction (in Wei). integer nonce The transaction sender's nonce. integer position The position of the transaction in the block. integer type The type of the transaction (see EIP-1559, EIP-2718). integer from The address of the transaction's sender. string to The address of the transaction's recipient, if any. string value The amount sent by the transaction (in Wei). integer contract_address The address of the contract created by the transaction, if any. string internal_transaction_count The number of internal transactions produced in the transaction. integer log_count The number of logs produced in the transaction. integer","title":"Transaction Model"},{"location":"rest/block-api/routes/accounts_by_address/","text":"Get Accounts by Address This endpoint returns Account Models for a given list of account addresses. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_addresses required The list of account addresses to retrieve, separated by commas (max 100 addresses per request, supports ENS names). [string] limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/accounts-by-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_addresses': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Accounts by Address"},{"location":"rest/block-api/routes/accounts_by_address/#get-accounts-by-address","text":"This endpoint returns Account Models for a given list of account addresses.","title":"Get Accounts by Address"},{"location":"rest/block-api/routes/accounts_by_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_addresses required The list of account addresses to retrieve, separated by commas (max 100 addresses per request, supports ENS names). [string] limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/accounts-by-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_addresses': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/accounts_by_creator/","text":"Get Accounts by Creator This endpoint returns all Contract Accounts that were created within a given date range by a given account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string creator_address required The address of the creator account to retrieve contracts for (supports ENS names). string created_after The earlier account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/contracts-by-creator\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'creator_address': '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Accounts by Creator"},{"location":"rest/block-api/routes/accounts_by_creator/#get-accounts-by-creator","text":"This endpoint returns all Contract Accounts that were created within a given date range by a given account (supports pagination).","title":"Get Accounts by Creator"},{"location":"rest/block-api/routes/accounts_by_creator/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string creator_address required The address of the creator account to retrieve contracts for (supports ENS names). string created_after The earlier account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/contracts-by-creator\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'creator_address': '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/accounts_by_date_created/","text":"Get Accounts by Date Created This endpoint returns Account Models for a given date range. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time account_type The type of account to filter results by (one of all, wallet, or contract). string order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/accounts-by-date-created\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Accounts by Date Created"},{"location":"rest/block-api/routes/accounts_by_date_created/#get-accounts-by-date-created","text":"This endpoint returns Account Models for a given date range.","title":"Get Accounts by Date Created"},{"location":"rest/block-api/routes/accounts_by_date_created/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time account_type The type of account to filter results by (one of all, wallet, or contract). string order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/accounts-by-date-created\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/blocks_by_date/","text":"Get Blocks by Date This endpoint returns all Blocks that were mined within a given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string added_after The earlier block number, inclusive. date-time added_before The later block number, inclusive. date-time order The order in which to retrieve the results (either asc or desc ). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/blocks-by-date\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Blocks by Date"},{"location":"rest/block-api/routes/blocks_by_date/#get-blocks-by-date","text":"This endpoint returns all Blocks that were mined within a given date range (supports pagination).","title":"Get Blocks by Date"},{"location":"rest/block-api/routes/blocks_by_date/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string added_after The earlier block number, inclusive. date-time added_before The later block number, inclusive. date-time order The order in which to retrieve the results (either asc or desc ). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/blocks-by-date\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/blocks_by_number/","text":"Get Blocks by Number This endpoint returns all Blocks that were mined within a given block number range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string block_number_above The earlier block number, inclusive. integer block_number_below The later block number, inclusive. integer order The order in which to retrieve the results (either asc or desc ). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/blocks-by-number\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Blocks by Number"},{"location":"rest/block-api/routes/blocks_by_number/#get-blocks-by-number","text":"This endpoint returns all Blocks that were mined within a given block number range (supports pagination).","title":"Get Blocks by Number"},{"location":"rest/block-api/routes/blocks_by_number/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string block_number_above The earlier block number, inclusive. integer block_number_below The later block number, inclusive. integer order The order in which to retrieve the results (either asc or desc ). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/blocks-by-number\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/transactions_by_account/","text":"Get Transactions by Account This endpoint returns all Transactions that occurred within a given date range and involved a given account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve contract executions for (supports ENS names). string occurred_after The earlier transaction date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later transaction date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transaction_direction Whether to match transactions that were sent by the account (sent), received by the account (received), or all (all). string order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/transactions-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'telemachus.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transactions by Account"},{"location":"rest/block-api/routes/transactions_by_account/#get-transactions-by-account","text":"This endpoint returns all Transactions that occurred within a given date range and involved a given account (supports pagination).","title":"Get Transactions by Account"},{"location":"rest/block-api/routes/transactions_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve contract executions for (supports ENS names). string occurred_after The earlier transaction date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later transaction date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transaction_direction Whether to match transactions that were sent by the account (sent), received by the account (received), or all (all). string order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/transactions-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'telemachus.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/transactions_by_block/","text":"Get Transactions by Block This endpoint returns all Transactions that occurred within a given block number range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string block_number_above The earlier block number, inclusive. integer block_number_below The later block number, inclusive. integer order The order in which to retrieve the results (either asc or desc ). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/transactions-by-block\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transactions by Block"},{"location":"rest/block-api/routes/transactions_by_block/#get-transactions-by-block","text":"This endpoint returns all Transactions that occurred within a given block number range (supports pagination).","title":"Get Transactions by Block"},{"location":"rest/block-api/routes/transactions_by_block/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string block_number_above The earlier block number, inclusive. integer block_number_below The later block number, inclusive. integer order The order in which to retrieve the results (either asc or desc ). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/transactions-by-block\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/transactions_by_date/","text":"Get Transactions by Date This endpoint returns all Transactions that occurred within a given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time account_type The type of account to filter results by (one of all, wallet, or contract). string order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/transactions-by-date\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transactions by Date"},{"location":"rest/block-api/routes/transactions_by_date/#get-transactions-by-date","text":"This endpoint returns all Transactions that occurred within a given date range (supports pagination).","title":"Get Transactions by Date"},{"location":"rest/block-api/routes/transactions_by_date/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later account creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time account_type The type of account to filter results by (one of all, wallet, or contract). string order The order in which to retrieve the results (either asc or desc). string limit The maximum number of results to retrieve string Python import requests url = \"https://api.transpose.io/block/transactions-by-date\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'limit': 1} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/block-api/routes/transactions_by_hash/","text":"Get Transactions by Hash This endpoint returns all Transactions for a given list of transaction hashes. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transaction_hashes required The list of transaction hashes to retrieve, separated by commas (max 100 hashes per request). [string] Python import requests url = \"https://api.transpose.io/block/transactions-by-hash\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'transaction_hashes': '0x24babced3c46202e43d1bda1329c018622c9e38008a1cccb7338ec2c6883d2b7'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transactions by Hash"},{"location":"rest/block-api/routes/transactions_by_hash/#get-transactions-by-hash","text":"This endpoint returns all Transactions for a given list of transaction hashes.","title":"Get Transactions by Hash"},{"location":"rest/block-api/routes/transactions_by_hash/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transaction_hashes required The list of transaction hashes to retrieve, separated by commas (max 100 hashes per request). [string] Python import requests url = \"https://api.transpose.io/block/transactions-by-hash\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'transaction_hashes': '0x24babced3c46202e43d1bda1329c018622c9e38008a1cccb7338ec2c6883d2b7'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/ens-api/overview/","text":"Welcome to the ENS API The ENS API provides endpoints for looking up ENS names (both historical and primary), resolving ENS names and records, and monitoring ENS transfers and sales. Endpoints The ENS API supports the following groups of endpoints: Record Endpoints : Retrieve any ENS record ever created by account, owner, name, node, registration date, expiration date and more. Transfer Endpoints : Retrieve all historical and live ENS name transfers and registrations.","title":"Overview"},{"location":"rest/ens-api/overview/#welcome-to-the-ens-api","text":"The ENS API provides endpoints for looking up ENS names (both historical and primary), resolving ENS names and records, and monitoring ENS transfers and sales.","title":"Welcome to the ENS API"},{"location":"rest/ens-api/overview/#endpoints","text":"The ENS API supports the following groups of endpoints: Record Endpoints : Retrieve any ENS record ever created by account, owner, name, node, registration date, expiration date and more. Transfer Endpoints : Retrieve all historical and live ENS name transfers and registrations.","title":"Endpoints"},{"location":"rest/ens-api/models/ens_record_model/","text":"ENS Record Model The ENS Record Model contains the full set of information for a single ENS name, including its owner, resolved address, resolver, node, and much more. The ENS Record Model follows the following structure: Name Description Type ens_name The ENS name. string ens_node The unique ENS nodehash which points to the ENS name. string contract_address The contract address of the ENS collection. string token_id The token ID of the ENS name. integer seq_id Unique sequential ID of the ENS name used by the Transpose backend. integer owner The owner of the ENS name. string resolver The resolver contract address of the ENS name. string resolved_address The address which has this ENS name set to be their primary name. string registration_timestamp The timestamp on which this ENS name was registerred (in ISO-8601 format). date-time expiration_timestamp The timestamp on which this ENS registration will expire (in ISO-8601 format). date-time grace_period_ends The timestamp on which this ENS name was registerred (in ISO-8601 format). date-time premium_period_ends The timestamp on which this grace period will end (in ISO-8601 format). date-time in_grace_period Whether the ENS name is currently in the 90 day grace period. boolean in_premium_period Whether the ENS name is currently in 21 day premium period. boolean is_expired Whether the ENS name is currently expired. boolean last_refreshed The timestamp at which the ENS record was last refreshed by the Transpose backend (in ISO-8601 format). date-time","title":"ENS Record Model"},{"location":"rest/ens-api/models/ens_record_model/#ens-record-model","text":"The ENS Record Model contains the full set of information for a single ENS name, including its owner, resolved address, resolver, node, and much more. The ENS Record Model follows the following structure: Name Description Type ens_name The ENS name. string ens_node The unique ENS nodehash which points to the ENS name. string contract_address The contract address of the ENS collection. string token_id The token ID of the ENS name. integer seq_id Unique sequential ID of the ENS name used by the Transpose backend. integer owner The owner of the ENS name. string resolver The resolver contract address of the ENS name. string resolved_address The address which has this ENS name set to be their primary name. string registration_timestamp The timestamp on which this ENS name was registerred (in ISO-8601 format). date-time expiration_timestamp The timestamp on which this ENS registration will expire (in ISO-8601 format). date-time grace_period_ends The timestamp on which this ENS name was registerred (in ISO-8601 format). date-time premium_period_ends The timestamp on which this grace period will end (in ISO-8601 format). date-time in_grace_period Whether the ENS name is currently in the 90 day grace period. boolean in_premium_period Whether the ENS name is currently in 21 day premium period. boolean is_expired Whether the ENS name is currently expired. boolean last_refreshed The timestamp at which the ENS record was last refreshed by the Transpose backend (in ISO-8601 format). date-time","title":"ENS Record Model"},{"location":"rest/ens-api/models/ens_transfer_model/","text":"ENS Transfer Model The ENS Transfer Model represents a single transfer of an ENS name. The ENS Transfer Model follows the following structure: Name Description Type ens_name The ENS name. string ens_node The unique ENS nodehash which points to the ENS name. string contract_address The contract address of the ENS collection. string token_id The token ID of the ENS name. integer block_number The block number at which the transfer occurred. integer log_index The log index at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string from The address of the sender. string to The address of the receiver. string","title":"ENS Transfer Model"},{"location":"rest/ens-api/models/ens_transfer_model/#ens-transfer-model","text":"The ENS Transfer Model represents a single transfer of an ENS name. The ENS Transfer Model follows the following structure: Name Description Type ens_name The ENS name. string ens_node The unique ENS nodehash which points to the ENS name. string contract_address The contract address of the ENS collection. string token_id The token ID of the ENS name. integer block_number The block number at which the transfer occurred. integer log_index The log index at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string from The address of the sender. string to The address of the receiver. string","title":"ENS Transfer Model"},{"location":"rest/ens-api/routes/ens_records_by_account/","text":"Get ENS Records by Account This endpoint returns ENS Records for names that resolve to a given account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string resolved_address required The account address of the resolved address to retrieve ENS records for (supports ENS names). string Python import requests url = \"https://api.transpose.io/ens/ens-records-by-resolved-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'resolved_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get ENS Records by Account"},{"location":"rest/ens-api/routes/ens_records_by_account/#get-ens-records-by-account","text":"This endpoint returns ENS Records for names that resolve to a given account (supports pagination).","title":"Get ENS Records by Account"},{"location":"rest/ens-api/routes/ens_records_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string resolved_address required The account address of the resolved address to retrieve ENS records for (supports ENS names). string Python import requests url = \"https://api.transpose.io/ens/ens-records-by-resolved-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'resolved_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/ens-api/routes/ens_records_by_date/","text":"Get ENS Records by Date This endpoint returns ENS Records with an expiration or registration timestamp within a given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string timestamp_after The later date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time timestamp_before The earlier date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time type Whether to match registration timestamps ( registration ) or expiration timestamps ( expiration ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/ens/ens-records-by-date\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get ENS Records by Date"},{"location":"rest/ens-api/routes/ens_records_by_date/#get-ens-records-by-date","text":"This endpoint returns ENS Records with an expiration or registration timestamp within a given date range (supports pagination).","title":"Get ENS Records by Date"},{"location":"rest/ens-api/routes/ens_records_by_date/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string timestamp_after The later date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time timestamp_before The earlier date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time type Whether to match registration timestamps ( registration ) or expiration timestamps ( expiration ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/ens/ens-records-by-date\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/ens-api/routes/ens_records_by_name/","text":"Get ENS Records by ENS Name This endpoint returns ENS Records that correspond to a given list of ENS names. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string ens_names required The list of ENS names to retrieve ENS records for. array of strings Python import requests url = \"https://api.transpose.io/ens/ens-records-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'ens_names': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get ENS Records by ENS Name"},{"location":"rest/ens-api/routes/ens_records_by_name/#get-ens-records-by-ens-name","text":"This endpoint returns ENS Records that correspond to a given list of ENS names.","title":"Get ENS Records by ENS Name"},{"location":"rest/ens-api/routes/ens_records_by_name/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string ens_names required The list of ENS names to retrieve ENS records for. array of strings Python import requests url = \"https://api.transpose.io/ens/ens-records-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'ens_names': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/ens-api/routes/ens_records_by_owner/","text":"Get ENS Records by Owner This endpoint returns ENS Records for names that are owned by a given account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string owner_address required The account address of the owner to retrieve ENS records for (supports ENS names). string Python import requests url = \"https://api.transpose.io/ens/ens-records-by-owner\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'owner_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get ENS Records by Owner"},{"location":"rest/ens-api/routes/ens_records_by_owner/#get-ens-records-by-owner","text":"This endpoint returns ENS Records for names that are owned by a given account (supports pagination).","title":"Get ENS Records by Owner"},{"location":"rest/ens-api/routes/ens_records_by_owner/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string owner_address required The account address of the owner to retrieve ENS records for (supports ENS names). string Python import requests url = \"https://api.transpose.io/ens/ens-records-by-owner\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'owner_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/ens-api/routes/ens_records_by_token_id/","text":"Get ENS Records by ENS Token ID This endpoint returns ENS Records for a given list of ENS token IDs. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string token_ids required The list of ENS token IDs to query ENS records for. array of integers Python import requests url = \"https://api.transpose.io/ens/ens-records-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'token_ids': '67401271993192073154370163675253119809791142202133058217191388560609186285768'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get ENS Records by ENS Token ID"},{"location":"rest/ens-api/routes/ens_records_by_token_id/#get-ens-records-by-ens-token-id","text":"This endpoint returns ENS Records for a given list of ENS token IDs.","title":"Get ENS Records by ENS Token ID"},{"location":"rest/ens-api/routes/ens_records_by_token_id/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string token_ids required The list of ENS token IDs to query ENS records for. array of integers Python import requests url = \"https://api.transpose.io/ens/ens-records-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'token_ids': '67401271993192073154370163675253119809791142202133058217191388560609186285768'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/ens-api/routes/ens_transfers_by_name/","text":"Get ENS Transfers by ENS Name This endpoint returns ENS Transfers for a given ENS name (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string ens_name required The ENS name to retrieve transfers for (max 256 characters). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/ens/ens-transfers-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'ens_name': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get ENS Transfers by ENS Name"},{"location":"rest/ens-api/routes/ens_transfers_by_name/#get-ens-transfers-by-ens-name","text":"This endpoint returns ENS Transfers for a given ENS name (supports pagination).","title":"Get ENS Transfers by ENS Name"},{"location":"rest/ens-api/routes/ens_transfers_by_name/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string ens_name required The ENS name to retrieve transfers for (max 256 characters). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/ens/ens-transfers-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'ens_name': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/ens-api/routes/ens_transfers_by_token_id/","text":"Get ENS Transfers by ENS Token ID This endpoint returns ENS Transfers for a given ENS token ID (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string token_id required The ENS token ID to retrieve transfers for. integer transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/ens/ens-transfers-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'token_id': '67401271993192073154370163675253119809791142202133058217191388560609186285768'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get ENS Transfers by ENS Token ID"},{"location":"rest/ens-api/routes/ens_transfers_by_token_id/#get-ens-transfers-by-ens-token-id","text":"This endpoint returns ENS Transfers for a given ENS token ID (supports pagination).","title":"Get ENS Transfers by ENS Token ID"},{"location":"rest/ens-api/routes/ens_transfers_by_token_id/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string token_id required The ENS token ID to retrieve transfers for. integer transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/ens/ens-transfers-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'token_id': '67401271993192073154370163675253119809791142202133058217191388560609186285768'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/overview/","text":"Welcome to the NFT API The NFT API provides endpoints for retrieving any collection and NFT in existence, as well as transfers, owners, sales, and much more (fully supports both ERC-721 and ERC-1155 NFTs). Endpoints The NFT API supports the following groups of endpoints: Collection Endpoints : Retrieve any NFT collection using flexible queries, along with collection metadata and images. NFT Endpoints : Retrieve any NFT in existence and rich NFT metadata and media, by date minted, collection, owner, and more. Owner Endpoints : Retrieve all owners for a particular collection or NFT (supports fungible balances for ERC-1155s) Sale Endpoints : Retrieve any NFT sale given an account, collection, or date range across many decentralized exchanges. Transfer Endpoints : Retrieve all transfers, including mints, sends, and burns, for any collection, NFT, or individual account.","title":"Overview"},{"location":"rest/nft-api/overview/#welcome-to-the-nft-api","text":"The NFT API provides endpoints for retrieving any collection and NFT in existence, as well as transfers, owners, sales, and much more (fully supports both ERC-721 and ERC-1155 NFTs).","title":"Welcome to the NFT API"},{"location":"rest/nft-api/overview/#endpoints","text":"The NFT API supports the following groups of endpoints: Collection Endpoints : Retrieve any NFT collection using flexible queries, along with collection metadata and images. NFT Endpoints : Retrieve any NFT in existence and rich NFT metadata and media, by date minted, collection, owner, and more. Owner Endpoints : Retrieve all owners for a particular collection or NFT (supports fungible balances for ERC-1155s) Sale Endpoints : Retrieve any NFT sale given an account, collection, or date range across many decentralized exchanges. Transfer Endpoints : Retrieve all transfers, including mints, sends, and burns, for any collection, NFT, or individual account.","title":"Endpoints"},{"location":"rest/nft-api/models/collection_model/","text":"Collection Model The Collection Model represents a single NFT collection. The Collection Model follows the following structure: Name Description Type contract_address Contract address of the collection. string name The collection's name. string symbol The collection's symbol string description The collection's description string created_timestamp The collection's timestamp of creation (in ISO-8601 format). date-time standard The collection's NFT standard (ERC-721 or ERC-1155) string count The number of NFTs in the collection (NFTs minted minus NFTs burned). integer external_url The collection's website URL. string image_url The collection's icon image URL. string twitter_username The collection's Twitter username. string telegram_url The collection's Telegram URL. string discord_url The collection's Discord URL. string is_nsfw The collection's NSFW status. boolean opensea_slug The collection's OpenSea slug. string opensea_url The collection's OpenSea URL. string last_refreshed The timestamp at which the collection was last refreshed by the Transpose backend (in ISO-8601 format). date-time","title":"Collection Model"},{"location":"rest/nft-api/models/collection_model/#collection-model","text":"The Collection Model represents a single NFT collection. The Collection Model follows the following structure: Name Description Type contract_address Contract address of the collection. string name The collection's name. string symbol The collection's symbol string description The collection's description string created_timestamp The collection's timestamp of creation (in ISO-8601 format). date-time standard The collection's NFT standard (ERC-721 or ERC-1155) string count The number of NFTs in the collection (NFTs minted minus NFTs burned). integer external_url The collection's website URL. string image_url The collection's icon image URL. string twitter_username The collection's Twitter username. string telegram_url The collection's Telegram URL. string discord_url The collection's Discord URL. string is_nsfw The collection's NSFW status. boolean opensea_slug The collection's OpenSea slug. string opensea_url The collection's OpenSea URL. string last_refreshed The timestamp at which the collection was last refreshed by the Transpose backend (in ISO-8601 format). date-time","title":"Collection Model"},{"location":"rest/nft-api/models/nft_model/","text":"NFT Model The NFT Model represents a single NFT with included ownership data (i.e. the owner account and owner's balance). The NFT Model follows the following structure: Name Description Type contract_address Contract address of the collection. string token_id The token ID of the nft. integer name The collection's name. string description The collection's description string minted_timestamp The NFT's mint timestamp (in ISO-8601 format). date-time supply The NFT's supply (zero if NFT has been burned). integer image_url The NFT's cleaned image URL. string media_url The NFT's cleaned additional media URL. string external_url The NFT's website URL. string properties The NFT's properties (also referred to as attributes or traits). object metadata_url The NFT's cleaned metadata URL. string","title":"NFT Model"},{"location":"rest/nft-api/models/nft_model/#nft-model","text":"The NFT Model represents a single NFT with included ownership data (i.e. the owner account and owner's balance). The NFT Model follows the following structure: Name Description Type contract_address Contract address of the collection. string token_id The token ID of the nft. integer name The collection's name. string description The collection's description string minted_timestamp The NFT's mint timestamp (in ISO-8601 format). date-time supply The NFT's supply (zero if NFT has been burned). integer image_url The NFT's cleaned image URL. string media_url The NFT's cleaned additional media URL. string external_url The NFT's website URL. string properties The NFT's properties (also referred to as attributes or traits). object metadata_url The NFT's cleaned metadata URL. string","title":"NFT Model"},{"location":"rest/nft-api/models/nft_owner_model/","text":"NFT Owner Model The NFT Owner Model represents a single NFT owner. The NFT Owner Model follows the following structure: Name Description Type contract_address Contract address of the NFT's collection. string token_id The token ID of the nft. integer owner The address of the owner. string balance The owner's balance for the nft. integer","title":"NFT Owner Model"},{"location":"rest/nft-api/models/nft_owner_model/#nft-owner-model","text":"The NFT Owner Model represents a single NFT owner. The NFT Owner Model follows the following structure: Name Description Type contract_address Contract address of the NFT's collection. string token_id The token ID of the nft. integer owner The address of the owner. string balance The owner's balance for the nft. integer","title":"NFT Owner Model"},{"location":"rest/nft-api/models/nft_sale_model/","text":"NFT Sale Model The NFT Sale Model represents a single NFT Sale on an exchange. The NFT Sale Model follows the following structure: Name Description Type contract_address Contract address of the NFT. string token_id Token ID of the NFT. integer block_number Block number at which the sale occurred. integer log_index Log index at which the sale occurred. integer transaction_hash Transaction hash at which the sale occurred. string timestamp Timestamp of the sale (in ISO-8601 format). date-time exchange_name Name of the exchange where the sale occurred. string contract_version The version of the exchange contract that hosted the NFT sale. string is_multi_token_sale Whether the sale is a multi-token sale. boolean multi_token_sale_index Whether the sale is a multi-token sale, including more than one unique NFT. integer quantity The quantity of the NFT sold. integer payment_token The payment token used for the sale. string price The total value of this sale in the payment token (formatted with the smallest denomination). integer eth_price The total value of this sale in ETH. integer usd_price The total value of this sale in USD. integer buyer The address of the buyer. string seller The address of the seller. string","title":"NFT Sale Model"},{"location":"rest/nft-api/models/nft_sale_model/#nft-sale-model","text":"The NFT Sale Model represents a single NFT Sale on an exchange. The NFT Sale Model follows the following structure: Name Description Type contract_address Contract address of the NFT. string token_id Token ID of the NFT. integer block_number Block number at which the sale occurred. integer log_index Log index at which the sale occurred. integer transaction_hash Transaction hash at which the sale occurred. string timestamp Timestamp of the sale (in ISO-8601 format). date-time exchange_name Name of the exchange where the sale occurred. string contract_version The version of the exchange contract that hosted the NFT sale. string is_multi_token_sale Whether the sale is a multi-token sale. boolean multi_token_sale_index Whether the sale is a multi-token sale, including more than one unique NFT. integer quantity The quantity of the NFT sold. integer payment_token The payment token used for the sale. string price The total value of this sale in the payment token (formatted with the smallest denomination). integer eth_price The total value of this sale in ETH. integer usd_price The total value of this sale in USD. integer buyer The address of the buyer. string seller The address of the seller. string","title":"NFT Sale Model"},{"location":"rest/nft-api/models/nft_transfer_model/","text":"NFT Transfer Model The NFT Transfer Model represents a single transfer of an nft. The NFT Transfer Model follows the following structure: Name Description Type contract_address The contract address of the ENS collection. string token_id The token ID of the ENS name. integer block_number The block number at which the transfer occurred. integer log_index The log index at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string operator The address of the operator that performed the transfer (only for ERC-1155 NFTs). string from The address of the sender. string to The address of the receiver. string quantity The quantity of NFTs transferred. integer","title":"NFT Transfer Model"},{"location":"rest/nft-api/models/nft_transfer_model/#nft-transfer-model","text":"The NFT Transfer Model represents a single transfer of an nft. The NFT Transfer Model follows the following structure: Name Description Type contract_address The contract address of the ENS collection. string token_id The token ID of the ENS name. integer block_number The block number at which the transfer occurred. integer log_index The log index at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string operator The address of the operator that performed the transfer (only for ERC-1155 NFTs). string from The address of the sender. string to The address of the receiver. string quantity The quantity of NFTs transferred. integer","title":"NFT Transfer Model"},{"location":"rest/nft-api/models/nft_with_owner_model/","text":"NFT With Owner Model The NFT Model represents a single NFT with included ownership data (i.e. the owner account and owner's balance). The NFT Model follows the following structure: Name Description Type contract_address Contract address of the collection. string token_id The token ID of the nft. integer name The collection's name. string description The collection's description. string minted_timestamp The NFT's mint timestamp (in ISO-8601 format). date-time supply The NFT's supply (zero if NFT has been burned). integer image_url The NFT's image cleaned URL. string media_url The NFT's cleaned additional media URL. string external_url The NFT's website URL. string properties The NFT's properties (also referred to as attributes or traits). object metadata_url The NFT's cleaned metadata URL. string owner The address of the owner. string balance The owner's balance for the nft. integer","title":"NFT With Owner Model"},{"location":"rest/nft-api/models/nft_with_owner_model/#nft-with-owner-model","text":"The NFT Model represents a single NFT with included ownership data (i.e. the owner account and owner's balance). The NFT Model follows the following structure: Name Description Type contract_address Contract address of the collection. string token_id The token ID of the nft. integer name The collection's name. string description The collection's description. string minted_timestamp The NFT's mint timestamp (in ISO-8601 format). date-time supply The NFT's supply (zero if NFT has been burned). integer image_url The NFT's image cleaned URL. string media_url The NFT's cleaned additional media URL. string external_url The NFT's website URL. string properties The NFT's properties (also referred to as attributes or traits). object metadata_url The NFT's cleaned metadata URL. string owner The address of the owner. string balance The owner's balance for the nft. integer","title":"NFT With Owner Model"},{"location":"rest/nft-api/routes/collections_by_contract_address/","text":"Get Collections by Contract Address This endpoint returns all NFT Collections for a given list of contract addresses. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_addresses required The list of contract addresses to retrieve, separated by commas (max 100 addresses per request, supports ENS names). array of strings Python import requests url = \"https://api.transpose.io/nft/collections-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_addresses': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Collections by Contract Address"},{"location":"rest/nft-api/routes/collections_by_contract_address/#get-collections-by-contract-address","text":"This endpoint returns all NFT Collections for a given list of contract addresses.","title":"Get Collections by Contract Address"},{"location":"rest/nft-api/routes/collections_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_addresses required The list of contract addresses to retrieve, separated by commas (max 100 addresses per request, supports ENS names). array of strings Python import requests url = \"https://api.transpose.io/nft/collections-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_addresses': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/collections_by_date_created/","text":"Get Collections by Date Created This endpoint returns all NFT Collections that were created within a given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time standard The NFT standard to filter results by ( ERC-721 or ERC-1155 ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/collections-by-date-created\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Collections by Date Created"},{"location":"rest/nft-api/routes/collections_by_date_created/#get-collections-by-date-created","text":"This endpoint returns all NFT Collections that were created within a given date range (supports pagination).","title":"Get Collections by Date Created"},{"location":"rest/nft-api/routes/collections_by_date_created/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time standard The NFT standard to filter results by ( ERC-721 or ERC-1155 ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/collections-by-date-created\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/collections_by_name/","text":"Get Collections by Name This endpoint returns all NFT Collections that match a given name substring (supports pagination up to 1000 results). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the collection name search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/nft/collections-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'punks'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Collections by Name"},{"location":"rest/nft-api/routes/collections_by_name/#get-collections-by-name","text":"This endpoint returns all NFT Collections that match a given name substring (supports pagination up to 1000 results).","title":"Get Collections by Name"},{"location":"rest/nft-api/routes/collections_by_name/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the collection name search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/nft/collections-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'punks'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/collections_by_symbol/","text":"Get Collections by Symbol This endpoint returns all NFT Collections that match a given symbol substring (supports pagination up to 1000 results). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the collection symbol search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/nft/collections-by-symbol\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'punks'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Collections by Symbol"},{"location":"rest/nft-api/routes/collections_by_symbol/#get-collections-by-symbol","text":"This endpoint returns all NFT Collections that match a given symbol substring (supports pagination up to 1000 results).","title":"Get Collections by Symbol"},{"location":"rest/nft-api/routes/collections_by_symbol/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the collection symbol search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/nft/collections-by-symbol\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'punks'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/nfts_by_contract_address/","text":"Get NFTs by Contract Address This endpoint returns all NFTs within a given collection, identified by a contract address (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve NFTs for (supports ENS names). string Python import requests url = \"https://api.transpose.io/nft/nfts-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFTs by Contract Address"},{"location":"rest/nft-api/routes/nfts_by_contract_address/#get-nfts-by-contract-address","text":"This endpoint returns all NFTs within a given collection, identified by a contract address (supports pagination).","title":"Get NFTs by Contract Address"},{"location":"rest/nft-api/routes/nfts_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve NFTs for (supports ENS names). string Python import requests url = \"https://api.transpose.io/nft/nfts-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/nfts_by_date_minted/","text":"Get NFTs by Date Minted This endpoint returns all NFTs that were minted within a given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string minted_after The earlier mint date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time minted_before The later mint date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time contract_address The contract address of the collection to filter results by (supports ENS names). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/nfts-by-date-minted\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFTs by Date Minted"},{"location":"rest/nft-api/routes/nfts_by_date_minted/#get-nfts-by-date-minted","text":"This endpoint returns all NFTs that were minted within a given date range (supports pagination).","title":"Get NFTs by Date Minted"},{"location":"rest/nft-api/routes/nfts_by_date_minted/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string minted_after The earlier mint date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time minted_before The later mint date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time contract_address The contract address of the collection to filter results by (supports ENS names). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/nfts-by-date-minted\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/nfts_by_name/","text":"Get NFTs by Name This endpoint returns all NFTs that match a given name substring (supports pagination up to 1000 results). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the NFT name search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/nft/nfts-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'punks'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFTs by Name"},{"location":"rest/nft-api/routes/nfts_by_name/#get-nfts-by-name","text":"This endpoint returns all NFTs that match a given name substring (supports pagination up to 1000 results).","title":"Get NFTs by Name"},{"location":"rest/nft-api/routes/nfts_by_name/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the NFT name search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/nft/nfts-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'punks'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/nfts_by_owner/","text":"Get NFTs by Owner This endpoint returns all NFTs that are owned by a given account address, with the included owner balances (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string owner_address required The address of the owner to retrieve NFTs for (supports ENS names). string contract_address The contract address of the collection to filter results by (supports ENS names). string Python import requests url = \"https://api.transpose.io/nft/nfts-by-owner\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'owner_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFTs by Owner"},{"location":"rest/nft-api/routes/nfts_by_owner/#get-nfts-by-owner","text":"This endpoint returns all NFTs that are owned by a given account address, with the included owner balances (supports pagination).","title":"Get NFTs by Owner"},{"location":"rest/nft-api/routes/nfts_by_owner/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string owner_address required The address of the owner to retrieve NFTs for (supports ENS names). string contract_address The contract address of the collection to filter results by (supports ENS names). string Python import requests url = \"https://api.transpose.io/nft/nfts-by-owner\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'owner_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/nfts_by_token_id/","text":"Get NFTs by Token ID This endpoint returns all NFTs for a given list of collection contract address and token ID pairs, inputted as two arrays of matching length. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_addresses required The list of collection contract addresses to retrieve NFTs for, separated by commas (max 100 addresses per request, supports ENS names). Must match the length of the token_ids parameter. array of strings token_ids required The list of token IDs to retrieve NFTs for, separated by commas (max 100 token IDs per request). Must match the length of the contract_addresses parameter. array of integers Python import requests url = \"https://api.transpose.io/nft/nfts-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_addresses': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_ids': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFTs by Token ID"},{"location":"rest/nft-api/routes/nfts_by_token_id/#get-nfts-by-token-id","text":"This endpoint returns all NFTs for a given list of collection contract address and token ID pairs, inputted as two arrays of matching length.","title":"Get NFTs by Token ID"},{"location":"rest/nft-api/routes/nfts_by_token_id/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_addresses required The list of collection contract addresses to retrieve NFTs for, separated by commas (max 100 addresses per request, supports ENS names). Must match the length of the token_ids parameter. array of strings token_ids required The list of token IDs to retrieve NFTs for, separated by commas (max 100 token IDs per request). Must match the length of the contract_addresses parameter. array of integers Python import requests url = \"https://api.transpose.io/nft/nfts-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_addresses': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_ids': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/owners_by_contract_address/","text":"Get Owners by Contract Address This endpoint returns all Accounts that own a given collection, identified by contract address and ordered by descending balance (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve owners for (supports ENS names). string Python import requests url = \"https://api.transpose.io/nft/owners-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Owners by Contract Address"},{"location":"rest/nft-api/routes/owners_by_contract_address/#get-owners-by-contract-address","text":"This endpoint returns all Accounts that own a given collection, identified by contract address and ordered by descending balance (supports pagination).","title":"Get Owners by Contract Address"},{"location":"rest/nft-api/routes/owners_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve owners for (supports ENS names). string Python import requests url = \"https://api.transpose.io/nft/owners-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/owners_by_token_id/","text":"Get Owners by Token ID This endpoint returns all Accounts that own a given NFT, identified by a collection contract address and token ID pair (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve owners for (supports ENS names). string token_id required The token ID of the NFT to retrieve owners for. integer Python import requests url = \"https://api.transpose.io/nft/owners-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_id': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Owners by Token ID"},{"location":"rest/nft-api/routes/owners_by_token_id/#get-owners-by-token-id","text":"This endpoint returns all Accounts that own a given NFT, identified by a collection contract address and token ID pair (supports pagination).","title":"Get Owners by Token ID"},{"location":"rest/nft-api/routes/owners_by_token_id/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve owners for (supports ENS names). string token_id required The token ID of the NFT to retrieve owners for. integer Python import requests url = \"https://api.transpose.io/nft/owners-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_id': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/sales/","text":"Get NFT Sales This endpoint returns all NFT Sales that occurred within the given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFT Sales"},{"location":"rest/nft-api/routes/sales/#get-nft-sales","text":"This endpoint returns all NFT Sales that occurred within the given date range (supports pagination).","title":"Get NFT Sales"},{"location":"rest/nft-api/routes/sales/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/sales_by_account/","text":"Get NFT Sales by Account This endpoint returns all NFT Sales that involve a specific account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve NFT sales for (supports ENS names). string sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time role The role of the account in the sale (one of buyer , seller , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFT Sales by Account"},{"location":"rest/nft-api/routes/sales_by_account/#get-nft-sales-by-account","text":"This endpoint returns all NFT Sales that involve a specific account (supports pagination).","title":"Get NFT Sales by Account"},{"location":"rest/nft-api/routes/sales_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve NFT sales for (supports ENS names). string sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time role The role of the account in the sale (one of buyer , seller , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/sales_by_contract_address/","text":"Get NFT Sales by Contract Address This endpoint returns all NFT Sales for an NFT collection, identified by a contract address (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve NFT sales for (supports ENS names). string sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time role The role of the account in the sale (one of buyer , seller , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFT Sales by Contract Address"},{"location":"rest/nft-api/routes/sales_by_contract_address/#get-nft-sales-by-contract-address","text":"This endpoint returns all NFT Sales for an NFT collection, identified by a contract address (supports pagination).","title":"Get NFT Sales by Contract Address"},{"location":"rest/nft-api/routes/sales_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve NFT sales for (supports ENS names). string sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time role The role of the account in the sale (one of buyer , seller , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/sales_by_token_id/","text":"Get NFT Sales by Token ID This endpoint returns all NFT Sales for an NFT, identified by a contract address and token ID pair (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The account address to retrieve NFT sales for (supports ENS names). string token_id required The Token ID of the NFT to retrieve sales for. integer sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_id': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get NFT Sales by Token ID"},{"location":"rest/nft-api/routes/sales_by_token_id/#get-nft-sales-by-token-id","text":"This endpoint returns all NFT Sales for an NFT, identified by a contract address and token ID pair (supports pagination).","title":"Get NFT Sales by Token ID"},{"location":"rest/nft-api/routes/sales_by_token_id/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The account address to retrieve NFT sales for (supports ENS names). string token_id required The Token ID of the NFT to retrieve sales for. integer sold_after The earlier sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time sold_before The later sale date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/sales-by-token-id\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_id': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/transfers/","text":"Get Transfers This endpoint returns all NFT Transfers that occurred within the given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transfers"},{"location":"rest/nft-api/routes/transfers/#get-transfers","text":"This endpoint returns all NFT Transfers that occurred within the given date range (supports pagination).","title":"Get Transfers"},{"location":"rest/nft-api/routes/transfers/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/transfers_by_account/","text":"Get Transfers by Account This endpoint returns all NFT Transfers that occurred within the given date range and involved a given account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_direction Whether to match transfers that were sent by the account ( sent ), received by the account ( received ), or all ( all ). string transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transfers by Account"},{"location":"rest/nft-api/routes/transfers_by_account/#get-transfers-by-account","text":"This endpoint returns all NFT Transfers that occurred within the given date range and involved a given account (supports pagination).","title":"Get Transfers by Account"},{"location":"rest/nft-api/routes/transfers_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_direction Whether to match transfers that were sent by the account ( sent ), received by the account ( received ), or all ( all ). string transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/transfers_by_contract_address/","text":"Get Transfers by Contract Address This endpoint returns all NFT Transfers that occurred within the given date range for a given collection, identified by a contract address (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transfers by Contract Address"},{"location":"rest/nft-api/routes/transfers_by_contract_address/#get-transfers-by-contract-address","text":"This endpoint returns all NFT Transfers that occurred within the given date range for a given collection, identified by a contract address (supports pagination).","title":"Get Transfers by Contract Address"},{"location":"rest/nft-api/routes/transfers_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/nft-api/routes/transfers_by_token_id/","text":"Get Transfers by Token ID This endpoint returns all NFT Transfers that occurred within the given date range for a given collection contract address and token ID pair (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve transfers for (supports ENS names). string token_id required The token ID of the NFT to retrieve transfers for. integer transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_id': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transfers by Token ID"},{"location":"rest/nft-api/routes/transfers_by_token_id/#get-transfers-by-token-id","text":"This endpoint returns all NFT Transfers that occurred within the given date range for a given collection contract address and token ID pair (supports pagination).","title":"Get Transfers by Token ID"},{"location":"rest/nft-api/routes/transfers_by_token_id/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the collection to retrieve transfers for (supports ENS names). string token_id required The token ID of the NFT to retrieve transfers for. integer transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/nft/transfers-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB', 'token_id': 5582} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/overview/","text":"Welcome to the Token API The Token API provides endpoints for retrieving any token, token balance, transfer, and symbol in existence, including full support for native token transfers and balances (fully supports both ERC-20 and ERC-777 tokens). Endpoints The Token API supports the following groups of endpoints: Token Info Endpoints : Retrieve any token ever created using flexible queries, along with token metadata and symbols. Owner Endpoints : Retrieve all owners and owner balances for a token (ordered by balance). Transfer Endpoints : Retrieve all transfers, including mints, sends, and burns, for any token or individual account. Swap Endpoints : Retrieve all swaps for any token, account, or date range across all decentralized exchanges. Native Token Endpoints : Retrieve historical native token transfers and balances for any account or time range.","title":"Overview"},{"location":"rest/token-api/overview/#welcome-to-the-token-api","text":"The Token API provides endpoints for retrieving any token, token balance, transfer, and symbol in existence, including full support for native token transfers and balances (fully supports both ERC-20 and ERC-777 tokens).","title":"Welcome to the Token API"},{"location":"rest/token-api/overview/#endpoints","text":"The Token API supports the following groups of endpoints: Token Info Endpoints : Retrieve any token ever created using flexible queries, along with token metadata and symbols. Owner Endpoints : Retrieve all owners and owner balances for a token (ordered by balance). Transfer Endpoints : Retrieve all transfers, including mints, sends, and burns, for any token or individual account. Swap Endpoints : Retrieve all swaps for any token, account, or date range across all decentralized exchanges. Native Token Endpoints : Retrieve historical native token transfers and balances for any account or time range.","title":"Endpoints"},{"location":"rest/token-api/models/native_token_balance_model/","text":"Native Token Balance Model The Native Token Balance Model represents an account's native token (Ether) balance. The Native Token Balance Model follows the following structure: Name Description Type account_address The account address. string balance The account's native token balance. integer","title":"Native Token Balance Model"},{"location":"rest/token-api/models/native_token_balance_model/#native-token-balance-model","text":"The Native Token Balance Model represents an account's native token (Ether) balance. The Native Token Balance Model follows the following structure: Name Description Type account_address The account address. string balance The account's native token balance. integer","title":"Native Token Balance Model"},{"location":"rest/token-api/models/native_token_transfer_model/","text":"Native Token Transfer Model The Native Token Transfer Model represents a single native token transfer. The Native Token Transfer Model follows the following structure: Name Description Type block_number The block number at which the transfer occurred. integer activity_id A sequential ID to identify the correct ordering of native token transfers. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string operator The address of the operator that performed the transfer. string from The address of the sender. string to The address of the receiver. string quantity The quantity of tokens transferred. integer","title":"Native Token Transfer Model"},{"location":"rest/token-api/models/native_token_transfer_model/#native-token-transfer-model","text":"The Native Token Transfer Model represents a single native token transfer. The Native Token Transfer Model follows the following structure: Name Description Type block_number The block number at which the transfer occurred. integer activity_id A sequential ID to identify the correct ordering of native token transfers. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string operator The address of the operator that performed the transfer. string from The address of the sender. string to The address of the receiver. string quantity The quantity of tokens transferred. integer","title":"Native Token Transfer Model"},{"location":"rest/token-api/models/token_model/","text":"Token Model The Token Model represents a single NFT token. The Token Model follows the following structure: Name Description Type contract_address Contract address of the token string name Name of the token string symbol Symbol of the token string decimals The number of decimals used by the token in user representations. integer created_timestamp The token's timestamp of creation (in ISO-8601 format). date-time standard The standard of the token (ERC-20 or ERC-777). string supply The token's total supply (tokens minted minus tokens burned). integer external_url The token's website URL. string image_url The token's icon image URL. string twitter_username The token's Twitter username. string telegram_url The token's Telegram URL. string discord_url The token's Discord URL. string whitepaper_url The token's whitepaper URL. string last_refreshed The timestamp at which the token was last refreshed by the Transpose backend (in ISO-8601 format). date-time","title":"Token Model"},{"location":"rest/token-api/models/token_model/#token-model","text":"The Token Model represents a single NFT token. The Token Model follows the following structure: Name Description Type contract_address Contract address of the token string name Name of the token string symbol Symbol of the token string decimals The number of decimals used by the token in user representations. integer created_timestamp The token's timestamp of creation (in ISO-8601 format). date-time standard The standard of the token (ERC-20 or ERC-777). string supply The token's total supply (tokens minted minus tokens burned). integer external_url The token's website URL. string image_url The token's icon image URL. string twitter_username The token's Twitter username. string telegram_url The token's Telegram URL. string discord_url The token's Discord URL. string whitepaper_url The token's whitepaper URL. string last_refreshed The timestamp at which the token was last refreshed by the Transpose backend (in ISO-8601 format). date-time","title":"Token Model"},{"location":"rest/token-api/models/token_owner_model/","text":"Token Owner Model The Token Owner Model represents a single token owner. The Token Owner Model follows the following structure: Name Description Type contract_address Contract address of the token. string owner The address of the owner. string balance The owner's balance for the token. integer","title":"Token Owner Model"},{"location":"rest/token-api/models/token_owner_model/#token-owner-model","text":"The Token Owner Model represents a single token owner. The Token Owner Model follows the following structure: Name Description Type contract_address Contract address of the token. string owner The address of the owner. string balance The owner's balance for the token. integer","title":"Token Owner Model"},{"location":"rest/token-api/models/token_swap_model/","text":"Token Swap Model The Token Swap Model represents a single token swap. The Token Swap Model follows the following structure: Name Description Type pair_contract_address Contract address of the token pair, if applicable. string from_token Contract address of the token swapped from. string to_token Contract address of the token swapped to. string block_number The block number at which the swap occurred. integer log_index The log index at which the swap occurred. integer transaction_hash The transaction hash at which the swap occurred. string timestamp The timestamp of the swap (in ISO-8601 format). date-time exchange_name The name of the exchange that hosted the token swap. string contract_version The version of the exchange contract that hosted the token swap. string quantity_in The amount of tokens the swapper put into the swap. integer quantity_out The amount of tokens that the swapper received from the swap integer effective_price The effective price of to_token denominated in from_token ( quantity_out / quantity_in ). number sender The address of the sender (may be a router contract address). string origin The address of the originator of the swap transaction. string","title":"Token Swap Model"},{"location":"rest/token-api/models/token_swap_model/#token-swap-model","text":"The Token Swap Model represents a single token swap. The Token Swap Model follows the following structure: Name Description Type pair_contract_address Contract address of the token pair, if applicable. string from_token Contract address of the token swapped from. string to_token Contract address of the token swapped to. string block_number The block number at which the swap occurred. integer log_index The log index at which the swap occurred. integer transaction_hash The transaction hash at which the swap occurred. string timestamp The timestamp of the swap (in ISO-8601 format). date-time exchange_name The name of the exchange that hosted the token swap. string contract_version The version of the exchange contract that hosted the token swap. string quantity_in The amount of tokens the swapper put into the swap. integer quantity_out The amount of tokens that the swapper received from the swap integer effective_price The effective price of to_token denominated in from_token ( quantity_out / quantity_in ). number sender The address of the sender (may be a router contract address). string origin The address of the originator of the swap transaction. string","title":"Token Swap Model"},{"location":"rest/token-api/models/token_transfer_model/","text":"Token Transfer Model The Token Transfer Model represents a single token transfer. The Token Transfer Model follows the following structure: Name Description Type contract_address Contract address of the token. string block_number The block number at which the transfer occurred. integer log_index The log index at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string operator The address of the operator that performed the transfer. string from The address of the sender. string to The address of the receiver. string quantity The quantity of tokens transferred. integer","title":"Token Transfer Model"},{"location":"rest/token-api/models/token_transfer_model/#token-transfer-model","text":"The Token Transfer Model represents a single token transfer. The Token Transfer Model follows the following structure: Name Description Type contract_address Contract address of the token. string block_number The block number at which the transfer occurred. integer log_index The log index at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. string timestamp The timestamp of the transfer (in ISO-8601 format). date-time category The category of the ENS name transfer (one of mint , send , burn ). string operator The address of the operator that performed the transfer. string from The address of the sender. string to The address of the receiver. string quantity The quantity of tokens transferred. integer","title":"Token Transfer Model"},{"location":"rest/token-api/models/token_with_owner_model/","text":"Token With Owner Model The Token With Owner Model represents a single token with included ownership data (i.e. the owner account and owner's balance). The Token With Owner Model follows the following structure: Name Description Type contract_address Contract address of the token string name Name of the token string symbol Symbol of the token string decimals The number of decimals used by the token in user representations. integer created_timestamp The token's timestamp of creation (in ISO-8601 format). date-time standard The standard of the token (ERC-20 or ERC-777). string supply The token's total supply (tokens minted minus tokens burned). integer external_url The token's website URL. string image_url The token's icon image URL. string twitter_username The token's Twitter username. string telegram_url The token's Telegram URL. string discord_url The token's Discord URL. string whitepaper_url The token's whitepaper URL. string last_refreshed The timestamp at which the token was last refreshed by the Transpose backend (in ISO-8601 format). date-time owner The owner's account address. string balance The owner's balance of the token. integer","title":"Token With Owner Model"},{"location":"rest/token-api/models/token_with_owner_model/#token-with-owner-model","text":"The Token With Owner Model represents a single token with included ownership data (i.e. the owner account and owner's balance). The Token With Owner Model follows the following structure: Name Description Type contract_address Contract address of the token string name Name of the token string symbol Symbol of the token string decimals The number of decimals used by the token in user representations. integer created_timestamp The token's timestamp of creation (in ISO-8601 format). date-time standard The standard of the token (ERC-20 or ERC-777). string supply The token's total supply (tokens minted minus tokens burned). integer external_url The token's website URL. string image_url The token's icon image URL. string twitter_username The token's Twitter username. string telegram_url The token's Telegram URL. string discord_url The token's Discord URL. string whitepaper_url The token's whitepaper URL. string last_refreshed The timestamp at which the token was last refreshed by the Transpose backend (in ISO-8601 format). date-time owner The owner's account address. string balance The owner's balance of the token. integer","title":"Token With Owner Model"},{"location":"rest/token-api/routes/native_token_balances_by_account/","text":"Get Native Token Balances by Account This endpoint returns all Native Token Balances balances for a given list of accounts (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_addresses required The list of account addresses to retrieve balances for, separated by commas (max 100 addresses per request, supports ENS names). array of strings Python import requests url = \"https://api.transpose.io/token/native-token-balances-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_addresses': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Native Token Balances by Account"},{"location":"rest/token-api/routes/native_token_balances_by_account/#get-native-token-balances-by-account","text":"This endpoint returns all Native Token Balances balances for a given list of accounts (supports pagination).","title":"Get Native Token Balances by Account"},{"location":"rest/token-api/routes/native_token_balances_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_addresses required The list of account addresses to retrieve balances for, separated by commas (max 100 addresses per request, supports ENS names). array of strings Python import requests url = \"https://api.transpose.io/token/native-token-balances-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_addresses': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/native_token_transfers/","text":"Get Native Token Transfers This endpoint returns all Native Token Transfers that occurred within the given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/native-token-transfers\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Native Token Transfers"},{"location":"rest/token-api/routes/native_token_transfers/#get-native-token-transfers","text":"This endpoint returns all Native Token Transfers that occurred within the given date range (supports pagination).","title":"Get Native Token Transfers"},{"location":"rest/token-api/routes/native_token_transfers/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/native-token-transfers\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/native_token_transfers_by_account/","text":"Get Narive Token Transfers by Account This endpoint returns all Native Token Transfers that occurred within the given date range and involved a given account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_direction Whether to match transfers that were sent by the account ( sent ), received by the account ( received ), or all ( all ). string transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/native-token-transfers-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Narive Token Transfers by Account"},{"location":"rest/token-api/routes/native_token_transfers_by_account/#get-narive-token-transfers-by-account","text":"This endpoint returns all Native Token Transfers that occurred within the given date range and involved a given account (supports pagination).","title":"Get Narive Token Transfers by Account"},{"location":"rest/token-api/routes/native_token_transfers_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_direction Whether to match transfers that were sent by the account ( sent ), received by the account ( received ), or all ( all ). string transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/native-token-transfers-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/owners_by_contract_address/","text":"Get Owners by Contract Address This endpoint returns all Accounts that own a given token, identified by a contract address (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the token to retrieve owners for (supports ENS names). string Python import requests url = \"https://api.transpose.io/token/owners-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Owners by Contract Address"},{"location":"rest/token-api/routes/owners_by_contract_address/#get-owners-by-contract-address","text":"This endpoint returns all Accounts that own a given token, identified by a contract address (supports pagination).","title":"Get Owners by Contract Address"},{"location":"rest/token-api/routes/owners_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the token to retrieve owners for (supports ENS names). string Python import requests url = \"https://api.transpose.io/token/owners-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/swaps/","text":"Get Token Swaps This endpoint returns all Token Swaps that occurred within the given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Token Swaps"},{"location":"rest/token-api/routes/swaps/#get-token-swaps","text":"This endpoint returns all Token Swaps that occurred within the given date range (supports pagination).","title":"Get Token Swaps"},{"location":"rest/token-api/routes/swaps/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/swaps_by_account/","text":"Get Token Swaps by Account This endpoint returns all Token Swaps that involved a specific account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve swaps for (supports ENS names). string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Token Swaps by Account"},{"location":"rest/token-api/routes/swaps_by_account/#get-token-swaps-by-account","text":"This endpoint returns all Token Swaps that involved a specific account (supports pagination).","title":"Get Token Swaps by Account"},{"location":"rest/token-api/routes/swaps_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve swaps for (supports ENS names). string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/swaps_by_contract_address/","text":"Get Token Swaps by Contract Address This endpoint returns all Token Swaps that occurred within the given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the token to retrieve swaps for (supports ENS names). string direction The direction of the swaps to fetch (either from , to , or all ). string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Token Swaps by Contract Address"},{"location":"rest/token-api/routes/swaps_by_contract_address/#get-token-swaps-by-contract-address","text":"This endpoint returns all Token Swaps that occurred within the given date range (supports pagination).","title":"Get Token Swaps by Contract Address"},{"location":"rest/token-api/routes/swaps_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the token to retrieve swaps for (supports ENS names). string direction The direction of the swaps to fetch (either from , to , or all ). string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/swaps_by_pair/","text":"Get Token Swaps by Pair This endpoint returns all Token Swaps for a token pair, identified by the pair of contract addresses (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string token_one required The contract address of the first token in the pair (supports ENS names). string token_two required The contract address of the second token in the pair (supports ENS names). string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps-by-pair\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'token_one': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 'token_two': '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Token Swaps by Pair"},{"location":"rest/token-api/routes/swaps_by_pair/#get-token-swaps-by-pair","text":"This endpoint returns all Token Swaps for a token pair, identified by the pair of contract addresses (supports pagination).","title":"Get Token Swaps by Pair"},{"location":"rest/token-api/routes/swaps_by_pair/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string token_one required The contract address of the first token in the pair (supports ENS names). string token_two required The contract address of the second token in the pair (supports ENS names). string occurred_after The earlier swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time occurred_before The later swap date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/swaps-by-pair\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'token_one': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 'token_two': '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/tokens_by_contract_address/","text":"Get Tokens by Contract Address This endpoint returns all Tokens for a given list of contract addresses. Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_addresses required The list of contract addresses to retrieve, separated by commas (max 100 addresses per request, supports ENS names). array of strings Python import requests url = \"https://api.transpose.io/token/tokens-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_addresses': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Tokens by Contract Address"},{"location":"rest/token-api/routes/tokens_by_contract_address/#get-tokens-by-contract-address","text":"This endpoint returns all Tokens for a given list of contract addresses.","title":"Get Tokens by Contract Address"},{"location":"rest/token-api/routes/tokens_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_addresses required The list of contract addresses to retrieve, separated by commas (max 100 addresses per request, supports ENS names). array of strings Python import requests url = \"https://api.transpose.io/token/tokens-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_addresses': '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/tokens_by_date_created/","text":"Get Tokens by Date Created This endpoint returns all Tokens that were created within a given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time standard The token standard to filter results by ( ERC-20 or ERC-777 ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/tokens-by-date-created\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Tokens by Date Created"},{"location":"rest/token-api/routes/tokens_by_date_created/#get-tokens-by-date-created","text":"This endpoint returns all Tokens that were created within a given date range (supports pagination).","title":"Get Tokens by Date Created"},{"location":"rest/token-api/routes/tokens_by_date_created/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string created_after The earlier contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time created_before The later contract creation date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time standard The token standard to filter results by ( ERC-20 or ERC-777 ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/tokens-by-date-created\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/tokens_by_name/","text":"Get Tokens by Name This endpoint returns all Tokens that match a given name substring (supports pagination up to 1000 results). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the token name search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/token/tokens-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'weth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Tokens by Name"},{"location":"rest/token-api/routes/tokens_by_name/#get-tokens-by-name","text":"This endpoint returns all Tokens that match a given name substring (supports pagination up to 1000 results).","title":"Get Tokens by Name"},{"location":"rest/token-api/routes/tokens_by_name/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the token name search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/token/tokens-by-name\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'weth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/tokens_by_owner/","text":"Get Tokens by Owner This endpoint returns all Tokens that are owned by a given account address, with the included owner balances (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string owner_address required The address of the owner to retrieve tokens for (supports ENS names). string contract_address The contract address of the token to filter results by (supports ENS names). string Python import requests url = \"https://api.transpose.io/token/tokens-by-owner\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'owner_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Tokens by Owner"},{"location":"rest/token-api/routes/tokens_by_owner/#get-tokens-by-owner","text":"This endpoint returns all Tokens that are owned by a given account address, with the included owner balances (supports pagination).","title":"Get Tokens by Owner"},{"location":"rest/token-api/routes/tokens_by_owner/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string owner_address required The address of the owner to retrieve tokens for (supports ENS names). string contract_address The contract address of the token to filter results by (supports ENS names). string Python import requests url = \"https://api.transpose.io/token/tokens-by-owner\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'owner_address': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/tokens_by_symbol/","text":"Get Tokens by Symbol This endpoint returns all Tokens that match a given symbol substring (supports pagination up to 1000 results). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the token symbol search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/token/tokens-by-symbol\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'weth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Tokens by Symbol"},{"location":"rest/token-api/routes/tokens_by_symbol/#get-tokens-by-symbol","text":"This endpoint returns all Tokens that match a given symbol substring (supports pagination up to 1000 results).","title":"Get Tokens by Symbol"},{"location":"rest/token-api/routes/tokens_by_symbol/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string substring required The substring to use in the token symbol search (case-insensitive, max length 100 characters). string fuzzy Whether to match text exactly or use fuzzy text matching. boolean Python import requests url = \"https://api.transpose.io/token/tokens-by-symbol\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'substring': 'weth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/transfers/","text":"Get Transfers This endpoint returns all Token Transfers that occurred within the given date range (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/transfers\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transfers"},{"location":"rest/token-api/routes/transfers/#get-transfers","text":"This endpoint returns all Token Transfers that occurred within the given date range (supports pagination).","title":"Get Transfers"},{"location":"rest/token-api/routes/transfers/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/transfers\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/transfers_by_account/","text":"Get Transfers by Account This endpoint returns all Token Transfers that occurred within the given date range and involved a given account (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_direction Whether to match transfers that were sent by the account ( sent ), received by the account ( received ), or all ( all ). string transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/transfers-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transfers by Account"},{"location":"rest/token-api/routes/transfers_by_account/#get-transfers-by-account","text":"This endpoint returns all Token Transfers that occurred within the given date range and involved a given account (supports pagination).","title":"Get Transfers by Account"},{"location":"rest/token-api/routes/transfers_by_account/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string account_address required The account address to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_direction Whether to match transfers that were sent by the account ( sent ), received by the account ( received ), or all ( all ). string transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/transfers-by-account\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'account_address': 'tmux.eth'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"rest/token-api/routes/transfers_by_contract_address/","text":"Get Transfers by Contract Address This endpoint returns all Token Transfers that occurred within the given date range for a given token, identified by a contract address (supports pagination). Parameters Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the token to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/transfers-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Get Transfers by Contract Address"},{"location":"rest/token-api/routes/transfers_by_contract_address/#get-transfers-by-contract-address","text":"This endpoint returns all Token Transfers that occurred within the given date range for a given token, identified by a contract address (supports pagination).","title":"Get Transfers by Contract Address"},{"location":"rest/token-api/routes/transfers_by_contract_address/#parameters","text":"Parameter Description Type chain_id A keyword (i.e. \"ethereum\") or CAIP-2 identifier specifying the blockchain to query. string contract_address required The contract address of the token to retrieve transfers for (supports ENS names). string transferred_after The earlier transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transferred_before The later transfer date, inclusive (in seconds since the Unix epoch or ISO-8601 format). date-time transfer_category The transfer category to filter results by (one of mint , send , burn , or all ). string order The order in which to retrieve the results (either asc or desc ). string Python import requests url = \"https://api.transpose.io/token/transfers-by-contract-address\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {'chain_id': 'ethereum', 'contract_address': '0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB'} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Parameters"},{"location":"sql/authentication/","text":"Authentication All you have to do to send an authenticated request to our SQL endpoint is send a POST request to https://api.transpose.io/sql with your key in the header and SQL request in the body. See the following example to get started: API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner. SQL Query SELECT /* extract date */ timestamp :: date AS date FROM ethereum . nft_sales AS sales /* specify CryptoPunks contract address */ WHERE sales . contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' /* group sales by date */ GROUP BY date /* skip days with no sales */ HAVING COUNT ( * ) > 0 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;'; const headers = { 'Content-Type': 'application }","title":"Authentication"},{"location":"sql/authentication/#authentication","text":"All you have to do to send an authenticated request to our SQL endpoint is send a POST request to https://api.transpose.io/sql with your key in the header and SQL request in the body. See the following example to get started: API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner. SQL Query SELECT /* extract date */ timestamp :: date AS date FROM ethereum . nft_sales AS sales /* specify CryptoPunks contract address */ WHERE sales . contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' /* group sales by date */ GROUP BY date /* skip days with no sales */ HAVING COUNT ( * ) > 0 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT timestamp::date AS date FROM ethereum.nft_sales AS sales WHERE sales.contract_address = '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D' GROUP BY date HAVING COUNT(*) > 0;'; const headers = { 'Content-Type': 'application }","title":"Authentication"},{"location":"sql/cancel/","text":"Cancelling Queries While most queries on Transpose run in just a few milliseconds, given the powerful combination of SQL and our massive quantity of data, it is possible to create queries that take longer to complete. In these situations, it may be useful for you to cancel queries that are already running. To create a cancellable query, you'll first need to create a query using the cancel_id option. This cancel_id is namespaced to your API key - so you can't cacancel someone else's query, or vice-versa! SQL Query SELECT COUNT ( * ) from ethereum . nfts LIMIT 100000 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT COUNT(*) from ethereum.nfts LIMIT 100000\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'cancel_id': ' ' } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT COUNT(*) from ethereum.nfts LIMIT 100000'; const headers = { 'Content-Type': 'application } You can then pass this cancel_id to our cancellation endpoint, as demonstrated below. Give this a go! Run the request above, and while it's running, try cancelling it with the request below ! Python import requests url = \"https://api.transpose.io/sql/cancel/ \" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Cancelling Queries"},{"location":"sql/cancel/#cancelling-queries","text":"While most queries on Transpose run in just a few milliseconds, given the powerful combination of SQL and our massive quantity of data, it is possible to create queries that take longer to complete. In these situations, it may be useful for you to cancel queries that are already running. To create a cancellable query, you'll first need to create a query using the cancel_id option. This cancel_id is namespaced to your API key - so you can't cacancel someone else's query, or vice-versa! SQL Query SELECT COUNT ( * ) from ethereum . nfts LIMIT 100000 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT COUNT(*) from ethereum.nfts LIMIT 100000\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'cancel_id': ' ' } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT COUNT(*) from ethereum.nfts LIMIT 100000'; const headers = { 'Content-Type': 'application } You can then pass this cancel_id to our cancellation endpoint, as demonstrated below. Give this a go! Run the request above, and while it's running, try cancelling it with the request below ! Python import requests url = \"https://api.transpose.io/sql/cancel/ \" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } params = {} response = requests.get(url, headers=headers, params=params) print(response.text)","title":"Cancelling Queries"},{"location":"sql/getting-started/","text":"Getting Started with Transpose SQL If you're brand new to Transpose, we recommend checking our our Quick Start Guide. Visit our Quickstart Guide Get started with both our REST and SQL APIs in less than 5 minutes. Get started in three easy steps Sign up for a free key through our webapp at app.transpose.io Create a new POST request, and include your API key in the header as X-API-KEY . Submit a valid SQL query in the body of the POST request to our SQL endpoint. Note that all of our table names are namespaced to a specific chain (i.e. ethereum.nft_sames ). SQL Query SELECT * FROM ethereum . nft_sales ORDER BY timestamp DESC LIMIT 10 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT * FROM ethereum.nft_sales ORDER BY timestamp DESC LIMIT 10;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT * FROM ethereum.nft_sales ORDER BY timestamp DESC LIMIT 10;'; const headers = { 'Content-Type': 'application }","title":"Getting Started"},{"location":"sql/getting-started/#getting-started-with-transpose-sql","text":"If you're brand new to Transpose, we recommend checking our our Quick Start Guide. Visit our Quickstart Guide Get started with both our REST and SQL APIs in less than 5 minutes.","title":"Getting Started with Transpose SQL"},{"location":"sql/getting-started/#get-started-in-three-easy-steps","text":"Sign up for a free key through our webapp at app.transpose.io Create a new POST request, and include your API key in the header as X-API-KEY . Submit a valid SQL query in the body of the POST request to our SQL endpoint. Note that all of our table names are namespaced to a specific chain (i.e. ethereum.nft_sames ). SQL Query SELECT * FROM ethereum . nft_sales ORDER BY timestamp DESC LIMIT 10 ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT * FROM ethereum.nft_sales ORDER BY timestamp DESC LIMIT 10;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT * FROM ethereum.nft_sales ORDER BY timestamp DESC LIMIT 10;'; const headers = { 'Content-Type': 'application }","title":"Get started in three easy steps"},{"location":"sql/multichain/","text":"Multichain Transpose supports the following chains: - Ethereum Mainnet - Polygon - Goerli More will be added soon! If we don't have a chain you're looking for, please reach out to the team. Querying chains All tables are namespaced with the target chain. As a simple example, getting recent blocks on Ethereum vs Polygon: SELECT * FROM ethereum . blocks ORDER BY timestamp desc LIMIT 10 ; vs: SELECT * FROM polygon . blocks ORDER BY timestamp desc LIMIT 10 ;","title":"Multichain"},{"location":"sql/multichain/#multichain","text":"Transpose supports the following chains: - Ethereum Mainnet - Polygon - Goerli More will be added soon! If we don't have a chain you're looking for, please reach out to the team.","title":"Multichain"},{"location":"sql/multichain/#querying-chains","text":"All tables are namespaced with the target chain. As a simple example, getting recent blocks on Ethereum vs Polygon: SELECT * FROM ethereum . blocks ORDER BY timestamp desc LIMIT 10 ; vs: SELECT * FROM polygon . blocks ORDER BY timestamp desc LIMIT 10 ;","title":"Querying chains"},{"location":"sql/overview/","text":"Overview Welcome to the Transpose SQL API Transpose offers direct SQL access to our entire ecosystem of indexed blockchain data. Paired with our robust indexing pipeline, SQL access gives unlimited flexibility in how you mix, aggregate, and query activity across the blockchain. Explore the Playground Start writing powerful and hyper-flexible queries against arbitrary real-time blockchain data. Explore the Atlas Explore and contribute to queries created by the Transpose community. Explore our SQL Documentation Start writing instantaneous, powerful and hyper-flexible queries against arbitrary real-time blockchain data. Join the Transpose Community Join our Discord to ask technical questions, share what you're building, chat with others in the community, suggest new features, request higher rate limits, and much more. Join our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Overview"},{"location":"sql/overview/#overview","text":"","title":"Overview"},{"location":"sql/overview/#welcome-to-the-transpose-sql-api","text":"Transpose offers direct SQL access to our entire ecosystem of indexed blockchain data. Paired with our robust indexing pipeline, SQL access gives unlimited flexibility in how you mix, aggregate, and query activity across the blockchain. Explore the Playground Start writing powerful and hyper-flexible queries against arbitrary real-time blockchain data. Explore the Atlas Explore and contribute to queries created by the Transpose community. Explore our SQL Documentation Start writing instantaneous, powerful and hyper-flexible queries against arbitrary real-time blockchain data.","title":"Welcome to the Transpose SQL API"},{"location":"sql/overview/#join-the-transpose-community","text":"Join our Discord to ask technical questions, share what you're building, chat with others in the community, suggest new features, request higher rate limits, and much more. Join our Discord Discord is the primary home of the Transpose developer community. Join us to ask questions, share your work, and get help.","title":"Join the Transpose Community"},{"location":"sql/playground/","text":"Playground The SQL Playground and Atlas are environments built for exploring, testing and organizing queries against the entirety of Transpose data. Playground to production code Transferring queries from the Playground to your code couldn't be easier. Simply click the \"view code\" button, select the right environment and you can copy it right in! Note that your API key will also be copied. Publishing to the Atlas There are two options for saving queries: 1. Save privately: available just to you, visible in your query browser bar in the playground. 2. Publish to Atlas: visible to everyone in the Atlas, also visible to you under published queries in the playground. Using the query planner The Analyze button returns the results of the query planner for the query in your editor. You can use this to check whether your queries are running against indexes. To see what indexes exist on each table, check out the SQL models to the left. Downloading data in the browser You can download the results of a query directly from the playground using the download button.","title":"Playground"},{"location":"sql/playground/#playground","text":"The SQL Playground and Atlas are environments built for exploring, testing and organizing queries against the entirety of Transpose data.","title":"Playground"},{"location":"sql/playground/#playground-to-production-code","text":"Transferring queries from the Playground to your code couldn't be easier. Simply click the \"view code\" button, select the right environment and you can copy it right in! Note that your API key will also be copied.","title":"Playground to production code"},{"location":"sql/playground/#publishing-to-the-atlas","text":"There are two options for saving queries: 1. Save privately: available just to you, visible in your query browser bar in the playground. 2. Publish to Atlas: visible to everyone in the Atlas, also visible to you under published queries in the playground.","title":"Publishing to the Atlas"},{"location":"sql/playground/#using-the-query-planner","text":"The Analyze button returns the results of the query planner for the query in your editor. You can use this to check whether your queries are running against indexes. To see what indexes exist on each table, check out the SQL models to the left.","title":"Using the query planner"},{"location":"sql/playground/#downloading-data-in-the-browser","text":"You can download the results of a query directly from the playground using the download button.","title":"Downloading data in the browser"},{"location":"sql/timeout/","text":"Query Timeouts To avoid accidentally sending queries that result in large credit charges, the default timeout for SQL requests is 25 seconds. Paid plans allow for longer query timeouts, depending on the tier. You can set a maximum timeout for your queries by passing an optional options parameter to the request body. Inside this parameter, specify timeout with a positive integer. Your query timeout will be set to the lesser of this specified timeout (if you pass it, otherwise the default is 25 seconds), and the maximum timeout allowed for your account tier. This is useful for requesting longer timeouts for particularly large queries, or shortening your timeouts for testing queries without consuming too many credits. For example, in the below example we set the timeout to 2 seconds for a particularly expensive COUNT query, that attempts to count every NFT across the history of Ethereum. API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner. SQL Query SELECT COUNT ( * ) from ethereum . nfts ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT COUNT(*) from ethereum.nfts;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'timeout': 2 } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT COUNT(*) from ethereum.nfts;'; const headers = { 'Content-Type': 'application }","title":"Query Timeouts"},{"location":"sql/timeout/#query-timeouts","text":"To avoid accidentally sending queries that result in large credit charges, the default timeout for SQL requests is 25 seconds. Paid plans allow for longer query timeouts, depending on the tier. You can set a maximum timeout for your queries by passing an optional options parameter to the request body. Inside this parameter, specify timeout with a positive integer. Your query timeout will be set to the lesser of this specified timeout (if you pass it, otherwise the default is 25 seconds), and the maximum timeout allowed for your account tier. This is useful for requesting longer timeouts for particularly large queries, or shortening your timeouts for testing queries without consuming too many credits. For example, in the below example we set the timeout to 2 seconds for a particularly expensive COUNT query, that attempts to count every NFT across the history of Ethereum. API Key Before proceeding, we need to authenticate ourselves with Transpose. To access any Transpose API, you'll need an API key. All API requests should include your API key in an X-API-KEY header. If you haven't already, you'll need to sign up and create a team (for free!) . Once you have a team, you can find a list of your API keys in your team dashboard. When you have your API key, replace <YOUR-API-KEY> in the interactive examples below with your key. Remember not to share your API key! Your API key is a secret, and should not be stored or exposed in a public manner. SQL Query SELECT COUNT ( * ) from ethereum . nfts ; Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT COUNT(*) from ethereum.nfts;\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'timeout': 2 } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT COUNT(*) from ethereum.nfts;'; const headers = { 'Content-Type': 'application }","title":"Query Timeouts"},{"location":"sql/options/stringify/","text":"Stringify Some languages, such as Javascript, have no native support for 256-bit integers. To work around this, you can pass the boolean stringify_numbers option as a parameter to your SQL-endpoint request. This returns all numeric objects (integers and floats) as their string representation. SQL Query SELECT token_id FROM ethereum . nfts LIMIT 1 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT token_id FROM ethereum.nfts LIMIT 1\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'stringify_numbers': True } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT token_id FROM ethereum.nfts LIMIT 1'; const headers = { 'Content-Type': 'application } SQL Query SELECT token_id FROM ethereum . nfts LIMIT 1 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT token_id FROM ethereum.nfts LIMIT 1\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'stringify_numbers': False } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT token_id FROM ethereum.nfts LIMIT 1'; const headers = { 'Content-Type': 'application }","title":"Stringify"},{"location":"sql/options/stringify/#stringify","text":"Some languages, such as Javascript, have no native support for 256-bit integers. To work around this, you can pass the boolean stringify_numbers option as a parameter to your SQL-endpoint request. This returns all numeric objects (integers and floats) as their string representation. SQL Query SELECT token_id FROM ethereum . nfts LIMIT 1 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT token_id FROM ethereum.nfts LIMIT 1\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'stringify_numbers': True } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT token_id FROM ethereum.nfts LIMIT 1'; const headers = { 'Content-Type': 'application } SQL Query SELECT token_id FROM ethereum . nfts LIMIT 1 Python Node import requests url = \"https://api.transpose.io/sql\" sql_query = \"\"\"SELECT token_id FROM ethereum.nfts LIMIT 1\"\"\" headers = { 'Content-Type': 'application/json', 'X-API-KEY': 'FxKTp6MHpWQDaos8SRnSetdIZiUYLliS', } response = requests.post(url, headers=headers, json={ 'sql': sql_query, 'options': { 'stringify_numbers': False } }, ) print(response.text) const fetch = require('node-fetch'); const url = 'https://api.transpose.io/sql'; const sql_query = 'SELECT token_id FROM ethereum.nfts LIMIT 1'; const headers = { 'Content-Type': 'application }","title":"Stringify"},{"location":"sql/tables/asset-layer/collections/collections/","text":"Collections The collections table provides indexed views of all NFT collections for a specified chain. Name Description Type contract_address Contract address of the collection. text created_timestamp The collection's timestamp of creation (in ISO-8601 format). timestamp standard The collection's NFT standard ( ERC-721 or ERC-1155 ) text count The number of NFTs in the collection (NFTs minted minus NFTs burned). integer last_refreshed The timestamp at which the collection was last refreshed by the Transpose backend (in ISO-8601 format). timestamp name The collection's name. text symbol The collection's symbol. text description The collection's description. text external_url The collection's website URL. text image_url The collection's image URL in the Transpose CDN. text is_nsfw The collection's NSFW status. boolean opensea_slug The collection's OpenSea slug. text opensea_url The collection's OpenSea URL. text","title":"Collections"},{"location":"sql/tables/asset-layer/collections/collections/#collections","text":"The collections table provides indexed views of all NFT collections for a specified chain. Name Description Type contract_address Contract address of the collection. text created_timestamp The collection's timestamp of creation (in ISO-8601 format). timestamp standard The collection's NFT standard ( ERC-721 or ERC-1155 ) text count The number of NFTs in the collection (NFTs minted minus NFTs burned). integer last_refreshed The timestamp at which the collection was last refreshed by the Transpose backend (in ISO-8601 format). timestamp name The collection's name. text symbol The collection's symbol. text description The collection's description. text external_url The collection's website URL. text image_url The collection's image URL in the Transpose CDN. text is_nsfw The collection's NSFW status. boolean opensea_slug The collection's OpenSea slug. text opensea_url The collection's OpenSea URL. text","title":"Collections"},{"location":"sql/tables/asset-layer/native-token-owners/native_token_owners/","text":"Native Token Owners The native_token_owners table provides indexed views of all owners and owner balances for the Ethereum native token (ETH). Name Description Type owner_address The address of the owner. text balance The owner's balance of the native token. numeric","title":"Native Token Owners"},{"location":"sql/tables/asset-layer/native-token-owners/native_token_owners/#native-token-owners","text":"The native_token_owners table provides indexed views of all owners and owner balances for the Ethereum native token (ETH). Name Description Type owner_address The address of the owner. text balance The owner's balance of the native token. numeric","title":"Native Token Owners"},{"location":"sql/tables/asset-layer/native-token-transfers/native_token_transfers/","text":"Native Token Transfers The native_token_transfers table provides indexed views of all transfers (mints, sends, and burns) for the Ethereum native token (ETH). Name Description Type timestamp The block number at which the transfer occurred. timestamp block_number The block number at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. text category The category of the token transfer (one of wallet or contract ). text from_address The address of the sender. text to_address The address of the receiver text quantity The quantity of native token transferred. numeric activity_id A sequential ID to identify the correct ordering of native token transfers. numeric __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Native Token Transfers"},{"location":"sql/tables/asset-layer/native-token-transfers/native_token_transfers/#native-token-transfers","text":"The native_token_transfers table provides indexed views of all transfers (mints, sends, and burns) for the Ethereum native token (ETH). Name Description Type timestamp The block number at which the transfer occurred. timestamp block_number The block number at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. text category The category of the token transfer (one of wallet or contract ). text from_address The address of the sender. text to_address The address of the receiver text quantity The quantity of native token transferred. numeric activity_id A sequential ID to identify the correct ordering of native token transfers. numeric __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Native Token Transfers"},{"location":"sql/tables/asset-layer/nft-owners/nft_owners/","text":"NFT Owners The nft_owners table provides indexed views of all owners and owner balances for Ethereum NFTs; Name Description Type contract_address Contract address of the NFT's collection. text token_id The token ID of the NFT. numeric owner_address The address of the owner. text balance The owner's balance of the NFT. numeric","title":"NFT Owners"},{"location":"sql/tables/asset-layer/nft-owners/nft_owners/#nft-owners","text":"The nft_owners table provides indexed views of all owners and owner balances for Ethereum NFTs; Name Description Type contract_address Contract address of the NFT's collection. text token_id The token ID of the NFT. numeric owner_address The address of the owner. text balance The owner's balance of the NFT. numeric","title":"NFT Owners"},{"location":"sql/tables/asset-layer/nft-transfers/nft_transfers/","text":"NFT Transfers The nft_transfers table provides indexed views of all transfers (mints, sends, and burns) for Ethereum NFTs. Name Description Type contract_address Contract address of the NFT's collection. text token_id The token ID of the NFT. numeric timestamp The timestamp of the transfer (in ISO-8601 format). timestamp block_number The block number at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. text log_index The log index at which the transfer occurred. integer category The category of the NFT transfer (one of mint , send , burn ). text operator_address The address of the operator that performed the transfer (only for ERC-1155 NFTs). text from_address The address of the sender. text to_address The address of the receiver. text quantity The quantity of the NFT transferred. numeric activity_id A unique, sequential identifier for the transfer event. numeric __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"NFT Transfers"},{"location":"sql/tables/asset-layer/nft-transfers/nft_transfers/#nft-transfers","text":"The nft_transfers table provides indexed views of all transfers (mints, sends, and burns) for Ethereum NFTs. Name Description Type contract_address Contract address of the NFT's collection. text token_id The token ID of the NFT. numeric timestamp The timestamp of the transfer (in ISO-8601 format). timestamp block_number The block number at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. text log_index The log index at which the transfer occurred. integer category The category of the NFT transfer (one of mint , send , burn ). text operator_address The address of the operator that performed the transfer (only for ERC-1155 NFTs). text from_address The address of the sender. text to_address The address of the receiver. text quantity The quantity of the NFT transferred. numeric activity_id A unique, sequential identifier for the transfer event. numeric __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"NFT Transfers"},{"location":"sql/tables/asset-layer/nfts/nfts/","text":"NFTs The nfts table provides indexed views of all NFTs for a specified chain. Name Description Type contract_address Contract address of the NFT's collection. text token_id The token ID of the NFT. numeric minted_timestamp The NFT's mint timestamp (in ISO-8601 format). timestamp supply The NFT's supply (0 if NFT has been burned). numeric last_refreshed The timestamp at which the collection was last refreshed by the Transpose backend (in ISO-8601 format). timestamp name The NFT's name. text description The NFT's description. text image_url The NFT's image URL. text external_url The NFT's website URL. text media_url The NFT's additional media URL. text properties The NFT's properties (also referred to as attributes or traits). json metadata_url The NFT's metadata URL. text","title":"NFTs"},{"location":"sql/tables/asset-layer/nfts/nfts/#nfts","text":"The nfts table provides indexed views of all NFTs for a specified chain. Name Description Type contract_address Contract address of the NFT's collection. text token_id The token ID of the NFT. numeric minted_timestamp The NFT's mint timestamp (in ISO-8601 format). timestamp supply The NFT's supply (0 if NFT has been burned). numeric last_refreshed The timestamp at which the collection was last refreshed by the Transpose backend (in ISO-8601 format). timestamp name The NFT's name. text description The NFT's description. text image_url The NFT's image URL. text external_url The NFT's website URL. text media_url The NFT's additional media URL. text properties The NFT's properties (also referred to as attributes or traits). json metadata_url The NFT's metadata URL. text","title":"NFTs"},{"location":"sql/tables/asset-layer/token-owners/token_owners/","text":"Token Owners The token_owners table provides indexed views of all owners and owner balances for Ethereum tokens. Name Description Type contract_address Contract address of the token. text owner_address The address of the owner. text balance The owner's balance for the token. numeric","title":"Token Owners"},{"location":"sql/tables/asset-layer/token-owners/token_owners/#token-owners","text":"The token_owners table provides indexed views of all owners and owner balances for Ethereum tokens. Name Description Type contract_address Contract address of the token. text owner_address The address of the owner. text balance The owner's balance for the token. numeric","title":"Token Owners"},{"location":"sql/tables/asset-layer/token-transfers/token_transfers/","text":"Token Transfers The token_transfers tables provides indexed views of all transfers (mints, sends, and burns) for Ethereum tokens. Name Description Type contract_address Contract address of the token. text timestamp The timestamp of the transfer (in ISO-8601 format). timestamp block_number The block number at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. text log_index The log index at which the transfer occurred. integer category The category of the token transfer (one of mint , send , or burn ). text operator_address The address of the operator that performed the transfer (only for ERC-777 tokens). text from_address The address of the sender. text to_address The address of the receiver. text quantity The quantity of tokens transferred. numeric activity_id A unique, sequential identifier for the transfer event. numeric __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Token Transfers"},{"location":"sql/tables/asset-layer/token-transfers/token_transfers/#token-transfers","text":"The token_transfers tables provides indexed views of all transfers (mints, sends, and burns) for Ethereum tokens. Name Description Type contract_address Contract address of the token. text timestamp The timestamp of the transfer (in ISO-8601 format). timestamp block_number The block number at which the transfer occurred. integer transaction_hash The transaction hash at which the transfer occurred. text log_index The log index at which the transfer occurred. integer category The category of the token transfer (one of mint , send , or burn ). text operator_address The address of the operator that performed the transfer (only for ERC-777 tokens). text from_address The address of the sender. text to_address The address of the receiver. text quantity The quantity of tokens transferred. numeric activity_id A unique, sequential identifier for the transfer event. numeric __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Token Transfers"},{"location":"sql/tables/asset-layer/tokens/tokens/","text":"Tokens The tokens table provides indexed views of all tokens for a specified chain. Name Description Type contract_address Contract address of the token. text created_timestamp The token's timestamp of creation (in ISO-8601 format). timestamp standard The token's standard ( ERC-20 or ERC-777 ). text supply The token's total supply (tokens minted minus tokens burned). numeric last_refreshed The timestamp at which the token was last refreshed by the Transpose backend (in ISO-8601 format). timestamp name The token's name. text symbol The token's symbol. text decimals The number of decimals used by the token in user representations. integer description The token's description. text external_url The token's website URL. text image_url The token's image URL. text","title":"Tokens"},{"location":"sql/tables/asset-layer/tokens/tokens/#tokens","text":"The tokens table provides indexed views of all tokens for a specified chain. Name Description Type contract_address Contract address of the token. text created_timestamp The token's timestamp of creation (in ISO-8601 format). timestamp standard The token's standard ( ERC-20 or ERC-777 ). text supply The token's total supply (tokens minted minus tokens burned). numeric last_refreshed The timestamp at which the token was last refreshed by the Transpose backend (in ISO-8601 format). timestamp name The token's name. text symbol The token's symbol. text decimals The number of decimals used by the token in user representations. integer description The token's description. text external_url The token's website URL. text image_url The token's image URL. text","title":"Tokens"},{"location":"sql/tables/protocol-layer/token_prices/","text":"Token Prices The token_prices table provides indexed views for cleaned token prices in USD at every point in time when a token was seen in a DEX swap. Prices are VWAP\u2019d per block (for tokens that were swapped multiple times in a single block). Name Description Type block_number The block number at which the DEX swap occurred for pricing the token. integer timestamp The timestamp of the DEX swap (in ISO-8601 format). timestamp token_address The address of the token that is priced in USD. text token_symbol The symbol of the token that is priced in USD. text price The price of the token at the time of the swap in USD. decimal __confirmed Flag indicating whether the block number the token was priced in has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Token Prices"},{"location":"sql/tables/protocol-layer/token_prices/#token-prices","text":"The token_prices table provides indexed views for cleaned token prices in USD at every point in time when a token was seen in a DEX swap. Prices are VWAP\u2019d per block (for tokens that were swapped multiple times in a single block). Name Description Type block_number The block number at which the DEX swap occurred for pricing the token. integer timestamp The timestamp of the DEX swap (in ISO-8601 format). timestamp token_address The address of the token that is priced in USD. text token_symbol The symbol of the token that is priced in USD. text price The price of the token at the time of the swap in USD. decimal __confirmed Flag indicating whether the block number the token was priced in has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Token Prices"},{"location":"sql/tables/protocol-layer/aggregate-dex-liquidity/dex_liquidity/","text":"Aggregate DEX Liquidity The dex_liquidity table provides indexed views of all DEX liquidity for a specified chain. All DEX liquidity tables follows the same database schema presented below. Name Description Type block_number The block number at which the event occurred. integer log_index The timestamp at which the event occurred. integer transaction_hash The transaction hash of the event. text timestamp The timestamp at which the event occurred. integer exchange_name The name of the exchange that the event occurred on. text contract_version The version of the exchange contract interacted with (e.g. v1 or v2 ). text contract_address The contract address of the DEX pool. text token_addresses A list of token addresses that the pool contains. text[] pool_balance The balance of the DEX pool. integer category The category of the event, one of ( deposit , withdraw , or swap ). text lp_address The contract address of the liquidity pool. text quantity The quantity of tokens. integer tick_lower The lower tick of the event. integer tick_upper The upper tick of the event. integer sender_address The address that initiated the event. text","title":"Aggregate DEX Liquidity"},{"location":"sql/tables/protocol-layer/aggregate-dex-liquidity/dex_liquidity/#aggregate-dex-liquidity","text":"The dex_liquidity table provides indexed views of all DEX liquidity for a specified chain. All DEX liquidity tables follows the same database schema presented below. Name Description Type block_number The block number at which the event occurred. integer log_index The timestamp at which the event occurred. integer transaction_hash The transaction hash of the event. text timestamp The timestamp at which the event occurred. integer exchange_name The name of the exchange that the event occurred on. text contract_version The version of the exchange contract interacted with (e.g. v1 or v2 ). text contract_address The contract address of the DEX pool. text token_addresses A list of token addresses that the pool contains. text[] pool_balance The balance of the DEX pool. integer category The category of the event, one of ( deposit , withdraw , or swap ). text lp_address The contract address of the liquidity pool. text quantity The quantity of tokens. integer tick_lower The lower tick of the event. integer tick_upper The upper tick of the event. integer sender_address The address that initiated the event. text","title":"Aggregate DEX Liquidity"},{"location":"sql/tables/protocol-layer/aggregate-dex-pools/dex_pools/","text":"Aggregate DEX Pools The dex_pools table provides indexed views of all DEX pools created for a specified chain. All DEX pools tables follows the same database schema presented below. Name Description Type created_block_number The block number at which the DEX pool was created. integer created_timestamp The timestamp at which the DEX pool was created. integer exchange_name The name of the exchange that the DEX pool belongs to. text contract_version The version of the exchange contract that the DEX pool belongs to (e.g. v1 or v2 for Balancer). text contract_address The contract address of the DEX pool. text token_addresses A list of token addresses that the pool contains (can include NFT contract addresses for SudoSwap pools). text[] creator_address The address that initiated the pool creation transaction. text factory_address The address of the factory that created the pool. text metadata Additional protocol-specific metadata for the pool. json","title":"Aggregate DEX Pools"},{"location":"sql/tables/protocol-layer/aggregate-dex-pools/dex_pools/#aggregate-dex-pools","text":"The dex_pools table provides indexed views of all DEX pools created for a specified chain. All DEX pools tables follows the same database schema presented below. Name Description Type created_block_number The block number at which the DEX pool was created. integer created_timestamp The timestamp at which the DEX pool was created. integer exchange_name The name of the exchange that the DEX pool belongs to. text contract_version The version of the exchange contract that the DEX pool belongs to (e.g. v1 or v2 for Balancer). text contract_address The contract address of the DEX pool. text token_addresses A list of token addresses that the pool contains (can include NFT contract addresses for SudoSwap pools). text[] creator_address The address that initiated the pool creation transaction. text factory_address The address of the factory that created the pool. text metadata Additional protocol-specific metadata for the pool. json","title":"Aggregate DEX Pools"},{"location":"sql/tables/protocol-layer/aggregate-dex-swaps/dex_swaps/","text":"Aggregate DEX Swaps The dex_swaps table provides indexed views of all DEX swaps transacted for a specified chain. All DEX swaps tables follows the same database schema presented below. Name Description Type block_number The block number at which the DEX swap occurred. integer log_index The log index at which the DEX swap occurred. integer transaction_hash The transaction hash at which the DEX swap occurred. text timestamp The timestamp of the DEX swap (in ISO-8601 format). timestamp exchange_name The name of the exchange that hosted the DEX swap. text contract_version The version of the exchange contract that hosted the DEX swap (e.g. v1 or v2 for Balancer). text contract_address The contract address of the pool that performed the DEX swap. text from_token_address The address of the token that was swapped in. text quantity_in The amount of the token that was swapped in. numeric to_token_address The address of the token that was swapped out. text quantity_out The amount of the token that was swapped out. numeric effective_price The price of the to-token denominated by the from-token (i.e. quantity_out / quantity_in ). numeric sender_address The address that performed the swap. text origin_address The address that submitted the transaction that contained the swap. text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Aggregate DEX Swaps"},{"location":"sql/tables/protocol-layer/aggregate-dex-swaps/dex_swaps/#aggregate-dex-swaps","text":"The dex_swaps table provides indexed views of all DEX swaps transacted for a specified chain. All DEX swaps tables follows the same database schema presented below. Name Description Type block_number The block number at which the DEX swap occurred. integer log_index The log index at which the DEX swap occurred. integer transaction_hash The transaction hash at which the DEX swap occurred. text timestamp The timestamp of the DEX swap (in ISO-8601 format). timestamp exchange_name The name of the exchange that hosted the DEX swap. text contract_version The version of the exchange contract that hosted the DEX swap (e.g. v1 or v2 for Balancer). text contract_address The contract address of the pool that performed the DEX swap. text from_token_address The address of the token that was swapped in. text quantity_in The amount of the token that was swapped in. numeric to_token_address The address of the token that was swapped out. text quantity_out The amount of the token that was swapped out. numeric effective_price The price of the to-token denominated by the from-token (i.e. quantity_out / quantity_in ). numeric sender_address The address that performed the swap. text origin_address The address that submitted the transaction that contained the swap. text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Aggregate DEX Swaps"},{"location":"sql/tables/protocol-layer/aggregate-nft-sales/nft_sales/","text":"Aggregate NFT Sales The nft_sales table provides indexed views of all NFT sales transacted on a specific chain, with support for USD price conversions, multi-token NFT sales, semi-fungible NFT sales, aggregator annotations, and much more. All NFT sales tables follows the same database schema presented below. Name Description Type block_number The block number at which the NFT sale occurred. integer log_index The log index at which the NFT sale occurred. integer transaction_hash The transaction hash at which the NFT sale occurred. text timestamp The timestamp of the NFT sale (in ISO-8601 format). timestamp exchange_name The name of the exchange that hosted the NFT sale. text contract_version The version of the exchange contract that hosted the NFT sale (e.g. wyvern or seaport for OpenSea). text aggregator_name The name of the aggregator used in the NFT sale (null if no aggregator was used). text contract_address The contract address of the NFT that was sold. text token_id The token ID of the NFT that was sold. numeric is_multi_token_sale Whether the sale is a multi-token sale, including more than one unique NFT for the given payment. boolean multi_token_sale_index The index of the sale within the multi-token sale (will be 0 if not a multi-token sale). integer price The total value of this sale in the payment token (in Wei). numeric usd_price The total value of this sale in USD. numeric eth_price The total value of this sale in ETH. numeric payment_token_address The address of the token used to pay for this sale ( null if the native token, ETH). text quantity The quantity of tokens sold (will only be greater than 1 for ERC-1155 NFTs). numeric seller_address The address of the account that sold the NFT. text buyer_address The address of the account that bought the NFT. text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Aggregate NFT Sales"},{"location":"sql/tables/protocol-layer/aggregate-nft-sales/nft_sales/#aggregate-nft-sales","text":"The nft_sales table provides indexed views of all NFT sales transacted on a specific chain, with support for USD price conversions, multi-token NFT sales, semi-fungible NFT sales, aggregator annotations, and much more. All NFT sales tables follows the same database schema presented below. Name Description Type block_number The block number at which the NFT sale occurred. integer log_index The log index at which the NFT sale occurred. integer transaction_hash The transaction hash at which the NFT sale occurred. text timestamp The timestamp of the NFT sale (in ISO-8601 format). timestamp exchange_name The name of the exchange that hosted the NFT sale. text contract_version The version of the exchange contract that hosted the NFT sale (e.g. wyvern or seaport for OpenSea). text aggregator_name The name of the aggregator used in the NFT sale (null if no aggregator was used). text contract_address The contract address of the NFT that was sold. text token_id The token ID of the NFT that was sold. numeric is_multi_token_sale Whether the sale is a multi-token sale, including more than one unique NFT for the given payment. boolean multi_token_sale_index The index of the sale within the multi-token sale (will be 0 if not a multi-token sale). integer price The total value of this sale in the payment token (in Wei). numeric usd_price The total value of this sale in USD. numeric eth_price The total value of this sale in ETH. numeric payment_token_address The address of the token used to pay for this sale ( null if the native token, ETH). text quantity The quantity of tokens sold (will only be greater than 1 for ERC-1155 NFTs). numeric seller_address The address of the account that sold the NFT. text buyer_address The address of the account that bought the NFT. text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Aggregate NFT Sales"},{"location":"sql/tables/protocol-layer/ens-names/ens_names/","text":"ENS Names The ens_names table provides indexed views of all ENS names on a specific chain, with continuous background refreshing of ENS data and ownership. Name Description Type ens_name The ENS name. text ens_node The unique ENS nodehash which points to the ENS name. text contract_address The contract address of the ENS collection. text token_id The token ID of the ENS name. numeric owner_address The address of the ENS name owner. text resolver_address The address of the resolver contract for the ENS name. text resolved_address The address that the ENS name resolves to. text expiration_timestamp The timestamp at which this ENS registration will expire (in ISO-8601 format). timestamp registration_timestamp The timestamp at which this ENS name was registered (in ISO-8601 format). timestamp last_refreshed The timestamp at which the ENS record was last refreshed by the Transpose backend (in ISO-8601 format). timestamp","title":"ENS Names"},{"location":"sql/tables/protocol-layer/ens-names/ens_names/#ens-names","text":"The ens_names table provides indexed views of all ENS names on a specific chain, with continuous background refreshing of ENS data and ownership. Name Description Type ens_name The ENS name. text ens_node The unique ENS nodehash which points to the ENS name. text contract_address The contract address of the ENS collection. text token_id The token ID of the ENS name. numeric owner_address The address of the ENS name owner. text resolver_address The address of the resolver contract for the ENS name. text resolved_address The address that the ENS name resolves to. text expiration_timestamp The timestamp at which this ENS registration will expire (in ISO-8601 format). timestamp registration_timestamp The timestamp at which this ENS name was registered (in ISO-8601 format). timestamp last_refreshed The timestamp at which the ENS record was last refreshed by the Transpose backend (in ISO-8601 format). timestamp","title":"ENS Names"},{"location":"sql/tables/protocol-layer/ens-registries/ens_registries/","text":"ENS Registries The ens_registries table provides indexed views of all ENS registries for a specified chain. Name Description Type created_block_number The block number at which the ENS registry was created. integer created_timestamp The timestamp at which the ENS registry was created. timestamp contract_address The contract address of the ENS registry. text","title":"ENS Registries"},{"location":"sql/tables/protocol-layer/ens-registries/ens_registries/#ens-registries","text":"The ens_registries table provides indexed views of all ENS registries for a specified chain. Name Description Type created_block_number The block number at which the ENS registry was created. integer created_timestamp The timestamp at which the ENS registry was created. timestamp contract_address The contract address of the ENS registry. text","title":"ENS Registries"},{"location":"sql/tables/protocol-layer/tornado-cash-deposits/tornado_cash_deposits/","text":"Tornado Cash Deposits The tornado_cash_deposits table provides indexed views of all deposits from any Tornado Cash mixer pools on a specific chain, including any forks of Tornado Cash. Name Description Type block_number The block number at which the deposit transaction occurred. integer log_index The log index at which the deposit event occurred. integer transaction_hash The transaction hash at which the deposit event occurred. text timestamp The timestamp of the deposit event (in ISO-8601 format). timestamp mixer_name The name of the pool, the symbol of the pool token, and the allowed size of the deposit token. Includes whether the pool is an actual Tornado Cash pool, or a Tornado Cash fork. text fork_number If the pool was not deployed by Tornado Cash Devs or other labelled fork deployers, then this indicates a Tornado Cash fork deployed by a unique dev, incrementing upwards when a new deployer address is seen. integer contract_address The contract address of the Tornado Pool. text token_address The token address deposited to the Tornado Pool. If none, the token is native ETH. text quanity The raw amount of the token deposited. numeric from_address The address that deposited the token amount. text origin_address The address that initiated the deposit transaction (the from address in the transaction). text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Tornado Cash Deposits"},{"location":"sql/tables/protocol-layer/tornado-cash-deposits/tornado_cash_deposits/#tornado-cash-deposits","text":"The tornado_cash_deposits table provides indexed views of all deposits from any Tornado Cash mixer pools on a specific chain, including any forks of Tornado Cash. Name Description Type block_number The block number at which the deposit transaction occurred. integer log_index The log index at which the deposit event occurred. integer transaction_hash The transaction hash at which the deposit event occurred. text timestamp The timestamp of the deposit event (in ISO-8601 format). timestamp mixer_name The name of the pool, the symbol of the pool token, and the allowed size of the deposit token. Includes whether the pool is an actual Tornado Cash pool, or a Tornado Cash fork. text fork_number If the pool was not deployed by Tornado Cash Devs or other labelled fork deployers, then this indicates a Tornado Cash fork deployed by a unique dev, incrementing upwards when a new deployer address is seen. integer contract_address The contract address of the Tornado Pool. text token_address The token address deposited to the Tornado Pool. If none, the token is native ETH. text quanity The raw amount of the token deposited. numeric from_address The address that deposited the token amount. text origin_address The address that initiated the deposit transaction (the from address in the transaction). text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Tornado Cash Deposits"},{"location":"sql/tables/protocol-layer/tornado-cash-pools/tornado_cash_pools/","text":"Tornado Cash Pools The tornado_cash_pools table provides indexed views of all Tornado Cash mixer pools on a specific chain, including any forks of Tornado Cash. Name Description Type created_block_number The block number that the contract was created at. integer created_timestamp The timestamp that the contract was created at. timestamp mixer_name The name of the pool, the symbol of the deposit token, and the allowed size of the deposit token. Includes whether the pool is an actual Tornado Cash pool, or a Tornado Cash fork. text fork_number If the pool was not deployed by Tornado Cash or other labelled fork deployers, this indicates a Tornado Cash fork deployed by a independent group, incrementing upwards when a new deployer address is seen. integer contract_address The contract address of the Tornado Cash pool. text token_address The token address for deposits/withdrawals to/from the Tornado Pool. If none, the token is native ETH. text creator_address The address that deployed the Tornado Pool. text metadata Miscellaneous metadata related to the tornado pool, includes the \u2018denomination\u2019 returned by the pool contract, referencing the static allowed deposit size the pool takes for its specified token, shifted by the decimals unit of the token. json","title":"Tornado Cash Pools"},{"location":"sql/tables/protocol-layer/tornado-cash-pools/tornado_cash_pools/#tornado-cash-pools","text":"The tornado_cash_pools table provides indexed views of all Tornado Cash mixer pools on a specific chain, including any forks of Tornado Cash. Name Description Type created_block_number The block number that the contract was created at. integer created_timestamp The timestamp that the contract was created at. timestamp mixer_name The name of the pool, the symbol of the deposit token, and the allowed size of the deposit token. Includes whether the pool is an actual Tornado Cash pool, or a Tornado Cash fork. text fork_number If the pool was not deployed by Tornado Cash or other labelled fork deployers, this indicates a Tornado Cash fork deployed by a independent group, incrementing upwards when a new deployer address is seen. integer contract_address The contract address of the Tornado Cash pool. text token_address The token address for deposits/withdrawals to/from the Tornado Pool. If none, the token is native ETH. text creator_address The address that deployed the Tornado Pool. text metadata Miscellaneous metadata related to the tornado pool, includes the \u2018denomination\u2019 returned by the pool contract, referencing the static allowed deposit size the pool takes for its specified token, shifted by the decimals unit of the token. json","title":"Tornado Cash Pools"},{"location":"sql/tables/protocol-layer/tornado-cash-withdrawals/tornado_cash_withdrawals/","text":"Tornado Cash Withdrawals The tornado_cash_withdrawals table provides indexed views of all withdraws from Tornado Cash mixer pools on a specific chain, including any forks of Tornado Cash. Name Description Type block_number The block number at which the withdrawal transaction occurred. integer log_index The log index at which the withdrawal event occurred. integer transaction_hash The transaction hash at which the withdrawal event occurred. text timestamp The timestamp of the withdrawal event (in ISO-8601 format). timestamp mixer_name The name of the pool, the symbol of the pool token, and the allowed size of the deposit token. Includes whether the pool is an actual Tornado Cash pool, or a Tornado Cash fork. text fork_number If the pool was not deployed by Tornado Cash Devs or other labelled fork deployers, then this indicates a Tornado Cash fork deployed by a unique dev, incrementing upwards when a new deployer address is seen. integer contract_address The contract address of the Tornado Pool. text token_address The token address withdrawn from the Tornado Pool. If none, the token is native ETH. text quantity The raw amount of the token withdrawn. numeric to_address The address that withdrew the token amount. text origin_address The address that initiated the withdrawal transaction (the from address in the transaction). text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Tornado Cash Withdrawals"},{"location":"sql/tables/protocol-layer/tornado-cash-withdrawals/tornado_cash_withdrawals/#tornado-cash-withdrawals","text":"The tornado_cash_withdrawals table provides indexed views of all withdraws from Tornado Cash mixer pools on a specific chain, including any forks of Tornado Cash. Name Description Type block_number The block number at which the withdrawal transaction occurred. integer log_index The log index at which the withdrawal event occurred. integer transaction_hash The transaction hash at which the withdrawal event occurred. text timestamp The timestamp of the withdrawal event (in ISO-8601 format). timestamp mixer_name The name of the pool, the symbol of the pool token, and the allowed size of the deposit token. Includes whether the pool is an actual Tornado Cash pool, or a Tornado Cash fork. text fork_number If the pool was not deployed by Tornado Cash Devs or other labelled fork deployers, then this indicates a Tornado Cash fork deployed by a unique dev, incrementing upwards when a new deployer address is seen. integer contract_address The contract address of the Tornado Pool. text token_address The token address withdrawn from the Tornado Pool. If none, the token is native ETH. text quantity The raw amount of the token withdrawn. numeric to_address The address that withdrew the token amount. text origin_address The address that initiated the withdrawal transaction (the from address in the transaction). text __confirmed Flag indicating whether the transfer has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Tornado Cash Withdrawals"},{"location":"sql/tables/settlement-layer/accounts/","text":"Accounts The accounts table provides indexed views of all accounts created on a specific chain, including both externally-owned accounts (colloquially referred to as wallets) and contracts. Name Description Type address The address of the account. text type The type of the account ( wallet or contract ). text last_active_timestamp The date at which the account was last active (in ISO-8601 format). timestamp created_timestamp The date at which the account was first created (in ISO-8601 format). timestamp creator_address The account creator ( null if the account is not a contract). text address The address of the account. text type The type of the account ( wallet or contract ). text last_active_timestamp The date at which the account was last active (in ISO-8601 format). timestamp created_timestamp The date at which the account was first created (in ISO-8601 format). timestamp creator_address The account creator ( null if the account is not a contract). text","title":"Accounts"},{"location":"sql/tables/settlement-layer/accounts/#accounts","text":"The accounts table provides indexed views of all accounts created on a specific chain, including both externally-owned accounts (colloquially referred to as wallets) and contracts. Name Description Type address The address of the account. text type The type of the account ( wallet or contract ). text last_active_timestamp The date at which the account was last active (in ISO-8601 format). timestamp created_timestamp The date at which the account was first created (in ISO-8601 format). timestamp creator_address The account creator ( null if the account is not a contract). text address The address of the account. text type The type of the account ( wallet or contract ). text last_active_timestamp The date at which the account was last active (in ISO-8601 format). timestamp created_timestamp The date at which the account was first created (in ISO-8601 format). timestamp creator_address The account creator ( null if the account is not a contract). text","title":"Accounts"},{"location":"sql/tables/settlement-layer/blocks/","text":"Blocks The blocks table provides indexed views of all blocks mined and validated for a specified chain. Name Description Type block_number The block's number integer block_hash The hash of all the block's contents. text timestamp The block's timestamp (in ISO-8601 format). timestamp parent_hash The hash of the block's parent block. text mix_hash The block's mix hash, used in the proof-of-work algorithm. text nonce The block's nonce, used in the proof-of-work algorithm. text sha3_uncles The hash of the block's uncle blocks. text difficulty The block's mining difficulty. numeric total_difficulty Total difficulty of all blocks up until the block. numeric size_bytes The block's size (in bytes). numeric base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). numeric gas_limit The maximum amount of gas that can be used in the block (in gas units). numeric gas_used The amount of gas used in the block (in gas units). numeric total_fees_burned The amount of transaction fees burned in the block (see EIP-1559) (in Wei). numeric total_fees_rewarded The amount of transaction fees rewarded to the miner of the block (in Wei). numeric total_fees_saved The amount of transaction fees saved by transactions in the block (in Wei). numeric transactions_count The number of transactions in the block. integer miner_address The address of the miner who mined the block. text block_reward The amount rewarded to the miner (or validator in PoS Ethereum) of the block (in Wei). numeric uncle_count The number of uncle blocks included in the block. integer uncle_1_address The address of the miner who mined the first uncle block. text uncle_2_address The address of the miner who mined the second uncle block. text uncle_1_reward The amount rewarded to the miner of the first uncle block (in Wei). numeric uncle_2_reward The amount rewarded to the miner of the second uncle block (in Wei). numeric __confirmed Flag indicating whether the block has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Blocks"},{"location":"sql/tables/settlement-layer/blocks/#blocks","text":"The blocks table provides indexed views of all blocks mined and validated for a specified chain. Name Description Type block_number The block's number integer block_hash The hash of all the block's contents. text timestamp The block's timestamp (in ISO-8601 format). timestamp parent_hash The hash of the block's parent block. text mix_hash The block's mix hash, used in the proof-of-work algorithm. text nonce The block's nonce, used in the proof-of-work algorithm. text sha3_uncles The hash of the block's uncle blocks. text difficulty The block's mining difficulty. numeric total_difficulty Total difficulty of all blocks up until the block. numeric size_bytes The block's size (in bytes). numeric base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). numeric gas_limit The maximum amount of gas that can be used in the block (in gas units). numeric gas_used The amount of gas used in the block (in gas units). numeric total_fees_burned The amount of transaction fees burned in the block (see EIP-1559) (in Wei). numeric total_fees_rewarded The amount of transaction fees rewarded to the miner of the block (in Wei). numeric total_fees_saved The amount of transaction fees saved by transactions in the block (in Wei). numeric transactions_count The number of transactions in the block. integer miner_address The address of the miner who mined the block. text block_reward The amount rewarded to the miner (or validator in PoS Ethereum) of the block (in Wei). numeric uncle_count The number of uncle blocks included in the block. integer uncle_1_address The address of the miner who mined the first uncle block. text uncle_2_address The address of the miner who mined the second uncle block. text uncle_1_reward The amount rewarded to the miner of the first uncle block (in Wei). numeric uncle_2_reward The amount rewarded to the miner of the second uncle block (in Wei). numeric __confirmed Flag indicating whether the block has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Blocks"},{"location":"sql/tables/settlement-layer/contract_labels/","text":"Contract Labels The contract_labels table provides indexed views for ethereum contract labels and names as provided by Etherscan. Name Description Type contract_address The address of the smart contract. text name The name of the smart contract, as provided by Etherscan. text labels The labels of the smart contract, as provided by Etherscan. text[]","title":"Contract Labels"},{"location":"sql/tables/settlement-layer/contract_labels/#contract-labels","text":"The contract_labels table provides indexed views for ethereum contract labels and names as provided by Etherscan. Name Description Type contract_address The address of the smart contract. text name The name of the smart contract, as provided by Etherscan. text labels The labels of the smart contract, as provided by Etherscan. text[]","title":"Contract Labels"},{"location":"sql/tables/settlement-layer/logs/","text":"Logs The logs table provides indexed views of all logs emitted for a specified chain. Name Description Type transaction_hash The parent transaction's hash. text log_index The index of the log in the block. integer address The address of the smart contract that emitted the log. text topic_0 The first log topic. text topic_1 The second log topic. text topic_2 The third log topic. text topic_3 The fourth log topic. text data The data of the log (bytes data as a hex string). text timestamp The log's timestamp (in ISO-8601 format). timestamp block_number The block number the parent transaction was included in. integer transaction_position The position of the parent transaction in the block. integer __confirmed Flag indicating whether the log has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Logs"},{"location":"sql/tables/settlement-layer/logs/#logs","text":"The logs table provides indexed views of all logs emitted for a specified chain. Name Description Type transaction_hash The parent transaction's hash. text log_index The index of the log in the block. integer address The address of the smart contract that emitted the log. text topic_0 The first log topic. text topic_1 The second log topic. text topic_2 The third log topic. text topic_3 The fourth log topic. text data The data of the log (bytes data as a hex string). text timestamp The log's timestamp (in ISO-8601 format). timestamp block_number The block number the parent transaction was included in. integer transaction_position The position of the parent transaction in the block. integer __confirmed Flag indicating whether the log has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Logs"},{"location":"sql/tables/settlement-layer/transactions/","text":"Transactions The transactions table provides indexed views of all transactions submitted for a specified chain. Name Description Type transaction_hash The transaction's hash. text timestamp The transaction's timestamp (in ISO-8601 format). timestamp block_number The block number the transaction was included in. integer base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). numeric max_priority_fee_per_gas The maximum priority fee used by the transaction (in Wei per gas unit). numeric max_fee_per_gas The maximum fee used by the transaction (in Wei per gas unit). numeric gas_limit The maximum amount of gas that can be used in the transaction (in gas units). numeric gas_used The amount of gas used in the transaction (in gas units). numeric gas_price The actual price of gas used in the transaction (in Wei per gas unit). numeric transaction_fee The gas fee paid by the transaction (in Wei). numeric fees_burned The amount of transaction fees burned by the transaction (see EIP-1559) (in Wei). numeric fees_rewarded The amount of transaction fees rewarded to the miner of the transaction (in Wei). numeric fees_saved The amount of transaction fees saved by the transaction (in Wei). numeric nonce The transaction sender's nonce. integer position The position of the transaction in the block. integer type The type of the transaction (see EIP-1559, EIP-2718). integer from_address The address of the transaction's sender. text to_address The address of the transaction's recipient, if any. text value The amount sent by the transaction (in Wei). numeric contract_address The address of the contract created by the transaction, if any. text internal_transaction_count The number of internal transactions produced in the transaction. integer log_count The number of logs produced in the transaction. integer __confirmed Flag indicating whether the transaction has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Transactions"},{"location":"sql/tables/settlement-layer/transactions/#transactions","text":"The transactions table provides indexed views of all transactions submitted for a specified chain. Name Description Type transaction_hash The transaction's hash. text timestamp The transaction's timestamp (in ISO-8601 format). timestamp block_number The block number the transaction was included in. integer base_fee_per_gas The base fee to include a transaction in the block (in Wei per gas unit). numeric max_priority_fee_per_gas The maximum priority fee used by the transaction (in Wei per gas unit). numeric max_fee_per_gas The maximum fee used by the transaction (in Wei per gas unit). numeric gas_limit The maximum amount of gas that can be used in the transaction (in gas units). numeric gas_used The amount of gas used in the transaction (in gas units). numeric gas_price The actual price of gas used in the transaction (in Wei per gas unit). numeric transaction_fee The gas fee paid by the transaction (in Wei). numeric fees_burned The amount of transaction fees burned by the transaction (see EIP-1559) (in Wei). numeric fees_rewarded The amount of transaction fees rewarded to the miner of the transaction (in Wei). numeric fees_saved The amount of transaction fees saved by the transaction (in Wei). numeric nonce The transaction sender's nonce. integer position The position of the transaction in the block. integer type The type of the transaction (see EIP-1559, EIP-2718). integer from_address The address of the transaction's sender. text to_address The address of the transaction's recipient, if any. text value The amount sent by the transaction (in Wei). numeric contract_address The address of the contract created by the transaction, if any. text internal_transaction_count The number of internal transactions produced in the transaction. integer log_count The number of logs produced in the transaction. integer __confirmed Flag indicating whether the transaction has been confirmed (2 Beacon Chain epochs have passed). boolean","title":"Transactions"}]}